apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: resource-requirements
    creationTimestamp: "2021-01-21T12:23:39Z"
    generateName: cilium-operator-5f487bb876-
    labels:
      io.cilium/app: operator
      name: cilium-operator
      pod-template-hash: 5f487bb876
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      time: "2021-01-21T12:25:32Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:io.cilium/app: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"d252f06a-98dd-4872-997b-3b6bfa792a6f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:podAntiAffinity:
              .: {}
              f:preferredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"cilium-operator"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"AWS_ACCESS_KEY_ID"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"AWS_DEFAULT_REGION"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"AWS_SECRET_ACCESS_KEY"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_CLUSTER_ID"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_CLUSTER_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_DEBUG"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_DISABLE_ENDPOINT_CRD"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_IDENTITY_ALLOCATION_MODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_IPAM"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_K8S_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"CILIUM_KVSTORE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_KVSTORE_OPT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"K8S_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/lib/etcd-config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/etcd-secrets"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"etcd-config-path"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
            k:{"name":"etcd-secrets"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:42:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:43:15Z"
    name: cilium-operator-5f487bb876-4n269
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cilium-operator-5f487bb876
      uid: d252f06a-98dd-4872-997b-3b6bfa792a6f
    resourceVersion: "179675"
    selfLink: /api/v1/namespaces/kube-system/pods/cilium-operator-5f487bb876-4n269
    uid: 325aa7e4-56c2-4500-96a8-5780c18dff5b
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: io.cilium/app
                operator: In
                values:
                - operator
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - --debug=$(CILIUM_DEBUG)
      - --identity-allocation-mode=$(CILIUM_IDENTITY_ALLOCATION_MODE)
      - --synchronize-k8s-nodes=true
      command:
      - cilium-operator
      env:
      - name: CILIUM_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CILIUM_DEBUG
        valueFrom:
          configMapKeyRef:
            key: debug
            name: cilium-config
            optional: true
      - name: CILIUM_CLUSTER_NAME
        valueFrom:
          configMapKeyRef:
            key: cluster-name
            name: cilium-config
            optional: true
      - name: CILIUM_CLUSTER_ID
        valueFrom:
          configMapKeyRef:
            key: cluster-id
            name: cilium-config
            optional: true
      - name: CILIUM_IPAM
        valueFrom:
          configMapKeyRef:
            key: ipam
            name: cilium-config
            optional: true
      - name: CILIUM_DISABLE_ENDPOINT_CRD
        valueFrom:
          configMapKeyRef:
            key: disable-endpoint-crd
            name: cilium-config
            optional: true
      - name: CILIUM_KVSTORE
        valueFrom:
          configMapKeyRef:
            key: kvstore
            name: cilium-config
            optional: true
      - name: CILIUM_KVSTORE_OPT
        valueFrom:
          configMapKeyRef:
            key: kvstore-opt
            name: cilium-config
            optional: true
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            key: AWS_ACCESS_KEY_ID
            name: cilium-aws
            optional: true
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            key: AWS_SECRET_ACCESS_KEY
            name: cilium-aws
            optional: true
      - name: AWS_DEFAULT_REGION
        valueFrom:
          secretKeyRef:
            key: AWS_DEFAULT_REGION
            name: cilium-aws
            optional: true
      - name: CILIUM_IDENTITY_ALLOCATION_MODE
        valueFrom:
          configMapKeyRef:
            key: identity-allocation-mode
            name: cilium-config
            optional: true
      image: docker.io/cilium/operator:v1.8.5
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 9234
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      name: cilium-operator
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/etcd-config
        name: etcd-config-path
        readOnly: true
      - mountPath: /var/lib/etcd-secrets
        name: etcd-secrets
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: cilium-operator-token-7wftr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: pool-jyot41pzb-3z28n
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: cilium-operator
    serviceAccountName: cilium-operator
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: etcd-config
          path: etcd.config
        name: cilium-config
      name: etcd-config-path
    - name: etcd-secrets
      secret:
        defaultMode: 420
        items:
        - key: etcd-ca
          path: etcd-client-ca.crt
        - key: etcd-key
          path: etcd-client.key
        - key: etcd-cert
          path: etcd-client.crt
        secretName: etcd-secrets
    - name: cilium-operator-token-7wftr
      secret:
        defaultMode: 420
        secretName: cilium-operator-token-7wftr
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:43Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:43:10Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:43:10Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:43Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://89a02f80c48b2f0c2d7f1f7bc9d2cc896af6901a64a4788628cc5766f5cfad96
      image: cilium/operator:v1.8.5
      imageID: docker-pullable://cilium/operator@sha256:487ac18d5ab4aef03f2d3436a01b1bb1858bd2635f4c7f5793eac4e7438201e3
      lastState:
        terminated:
          containerID: docker://321814b4923d1398155671542f055a8c35e1038e24f7e6413f33d7715376d3c5
          exitCode: 0
          finishedAt: "2021-01-22T15:42:06Z"
          reason: Completed
          startedAt: "2021-01-21T12:25:44Z"
      name: cilium-operator
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:43:09Z"
    hostIP: 10.133.0.3
    phase: Running
    podIP: 10.133.0.3
    podIPs:
    - ip: 10.133.0.3
    qosClass: BestEffort
    startTime: "2021-01-21T12:25:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: resource-requirements
    creationTimestamp: "2021-01-21T12:23:39Z"
    generateName: cilium-operator-5f487bb876-
    labels:
      io.cilium/app: operator
      name: cilium-operator
      pod-template-hash: 5f487bb876
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      time: "2021-01-21T12:25:33Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:io.cilium/app: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"d252f06a-98dd-4872-997b-3b6bfa792a6f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:podAntiAffinity:
              .: {}
              f:preferredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"cilium-operator"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"AWS_ACCESS_KEY_ID"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"AWS_DEFAULT_REGION"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"AWS_SECRET_ACCESS_KEY"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_CLUSTER_ID"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_CLUSTER_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_DEBUG"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_DISABLE_ENDPOINT_CRD"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_IDENTITY_ALLOCATION_MODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_IPAM"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_K8S_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"CILIUM_KVSTORE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_KVSTORE_OPT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"K8S_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/lib/etcd-config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/etcd-secrets"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"etcd-config-path"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
            k:{"name":"etcd-secrets"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:42:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:43:13Z"
    name: cilium-operator-5f487bb876-hn99c
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cilium-operator-5f487bb876
      uid: d252f06a-98dd-4872-997b-3b6bfa792a6f
    resourceVersion: "179656"
    selfLink: /api/v1/namespaces/kube-system/pods/cilium-operator-5f487bb876-hn99c
    uid: 9e94c932-bcd2-4129-b04c-9ec1f9e6409b
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: io.cilium/app
                operator: In
                values:
                - operator
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - --debug=$(CILIUM_DEBUG)
      - --identity-allocation-mode=$(CILIUM_IDENTITY_ALLOCATION_MODE)
      - --synchronize-k8s-nodes=true
      command:
      - cilium-operator
      env:
      - name: CILIUM_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CILIUM_DEBUG
        valueFrom:
          configMapKeyRef:
            key: debug
            name: cilium-config
            optional: true
      - name: CILIUM_CLUSTER_NAME
        valueFrom:
          configMapKeyRef:
            key: cluster-name
            name: cilium-config
            optional: true
      - name: CILIUM_CLUSTER_ID
        valueFrom:
          configMapKeyRef:
            key: cluster-id
            name: cilium-config
            optional: true
      - name: CILIUM_IPAM
        valueFrom:
          configMapKeyRef:
            key: ipam
            name: cilium-config
            optional: true
      - name: CILIUM_DISABLE_ENDPOINT_CRD
        valueFrom:
          configMapKeyRef:
            key: disable-endpoint-crd
            name: cilium-config
            optional: true
      - name: CILIUM_KVSTORE
        valueFrom:
          configMapKeyRef:
            key: kvstore
            name: cilium-config
            optional: true
      - name: CILIUM_KVSTORE_OPT
        valueFrom:
          configMapKeyRef:
            key: kvstore-opt
            name: cilium-config
            optional: true
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            key: AWS_ACCESS_KEY_ID
            name: cilium-aws
            optional: true
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            key: AWS_SECRET_ACCESS_KEY
            name: cilium-aws
            optional: true
      - name: AWS_DEFAULT_REGION
        valueFrom:
          secretKeyRef:
            key: AWS_DEFAULT_REGION
            name: cilium-aws
            optional: true
      - name: CILIUM_IDENTITY_ALLOCATION_MODE
        valueFrom:
          configMapKeyRef:
            key: identity-allocation-mode
            name: cilium-config
            optional: true
      image: docker.io/cilium/operator:v1.8.5
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 9234
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      name: cilium-operator
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/etcd-config
        name: etcd-config-path
        readOnly: true
      - mountPath: /var/lib/etcd-secrets
        name: etcd-secrets
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: cilium-operator-token-7wftr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: pool-jyot41pzb-3z28n
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: cilium-operator
    serviceAccountName: cilium-operator
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: etcd-config
          path: etcd.config
        name: cilium-config
      name: etcd-config-path
    - name: etcd-secrets
      secret:
        defaultMode: 420
        items:
        - key: etcd-ca
          path: etcd-client-ca.crt
        - key: etcd-key
          path: etcd-client.key
        - key: etcd-cert
          path: etcd-client.crt
        secretName: etcd-secrets
    - name: cilium-operator-token-7wftr
      secret:
        defaultMode: 420
        secretName: cilium-operator-token-7wftr
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:43Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:43:10Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:43:10Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:43Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://387d5b66954c4d36fd5b9d94434a43cc5f96205bbf257d7a9151561c07c8bef4
      image: cilium/operator:v1.8.5
      imageID: docker-pullable://cilium/operator@sha256:487ac18d5ab4aef03f2d3436a01b1bb1858bd2635f4c7f5793eac4e7438201e3
      lastState:
        terminated:
          containerID: docker://dfaaf9ad9b33e9e6dd5aa05e0f0ed8f6efc202bdd79b9fa777a0ec3f62b79b6e
          exitCode: 0
          finishedAt: "2021-01-22T15:42:06Z"
          reason: Completed
          startedAt: "2021-01-21T12:25:44Z"
      name: cilium-operator
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:43:09Z"
    hostIP: 10.133.0.3
    phase: Running
    podIP: 10.133.0.3
    podIPs:
    - ip: 10.133.0.3
    qosClass: BestEffort
    startTime: "2021-01-21T12:25:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: privileged-containers,non-root-user,resource-requirements,hostpath-volume
      prometheus.io/port: "9090"
      prometheus.io/scrape: "true"
    creationTimestamp: "2021-01-21T12:25:51Z"
    generateName: cilium-
    labels:
      controller-revision-hash: 7c7f7d9644
      k8s-app: cilium
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:kubernetes.io/cluster-service: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"0b1a49ac-053c-442e-98cd-f662682ece89"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"cilium-agent"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CILIUM_CLUSTERMESH_CONFIG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CILIUM_CNI_CHAINING_MODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_CUSTOM_CNI_CONF"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_FLANNEL_MASTER_DEVICE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_FLANNEL_UNINSTALL_ON_EXIT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_K8S_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"K8S_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:postStart:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:httpHeaders: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9090,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/sys/fs/bpf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp/cilium/config-map"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/cilium/clustermesh"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/etcd-config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/etcd-secrets"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/run/cilium"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"clean-cilium-state"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CILIUM_ALL_STATE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_BPF_STATE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_WAIT_BPF_MOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/sys/fs/bpf"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                k:{"mountPath":"/var/run/cilium"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"bpf-maps"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cilium-config-path"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"cilium-run"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"clustermesh-secrets"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"cni-path"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-cni-netd"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etcd-config-path"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
            k:{"name":"etcd-secrets"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:secretName: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:45:28Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:46:12Z"
    name: cilium-qmkvl
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: cilium
      uid: 0b1a49ac-053c-442e-98cd-f662682ece89
    resourceVersion: "180227"
    selfLink: /api/v1/namespaces/kube-system/pods/cilium-qmkvl
    uid: d721cef4-f673-4e31-823b-b345cc0d3001
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z239
    containers:
    - args:
      - --kvstore=etcd
      - --kvstore-opt=etcd.config=/var/lib/etcd-config/etcd.config
      - --k8s-require-ipv4-pod-cidr
      - --config-dir=/tmp/cilium/config-map
      command:
      - cilium-agent
      env:
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CILIUM_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CILIUM_FLANNEL_MASTER_DEVICE
        valueFrom:
          configMapKeyRef:
            key: flannel-master-device
            name: cilium-config
            optional: true
      - name: CILIUM_FLANNEL_UNINSTALL_ON_EXIT
        valueFrom:
          configMapKeyRef:
            key: flannel-uninstall-on-exit
            name: cilium-config
            optional: true
      - name: CILIUM_CLUSTERMESH_CONFIG
        value: /var/lib/cilium/clustermesh/
      - name: CILIUM_CNI_CHAINING_MODE
        valueFrom:
          configMapKeyRef:
            key: cni-chaining-mode
            name: cilium-config
            optional: true
      - name: CILIUM_CUSTOM_CNI_CONF
        valueFrom:
          configMapKeyRef:
            key: custom-cni-conf
            name: cilium-config
            optional: true
      image: docker.io/cilium/cilium:v1.8.5
      imagePullPolicy: IfNotPresent
      lifecycle:
        postStart:
          exec:
            command:
            - /cni-install.sh
        preStop:
          exec:
            command:
            - /cni-uninstall.sh
      livenessProbe:
        failureThreshold: 10
        httpGet:
          host: 127.0.0.1
          httpHeaders:
          - name: brief
            value: "true"
          path: /healthz
          port: 9876
          scheme: HTTP
        initialDelaySeconds: 120
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      name: cilium-agent
      ports:
      - containerPort: 9090
        hostPort: 9090
        name: prometheus
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cilium
          - status
          - --brief
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 300m
          memory: 300Mi
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - SYS_MODULE
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /host/opt/cni/bin
        name: cni-path
      - mountPath: /host/etc/cni/net.d
        name: etc-cni-netd
      - mountPath: /var/lib/etcd-config
        name: etcd-config-path
        readOnly: true
      - mountPath: /var/lib/etcd-secrets
        name: etcd-secrets
        readOnly: true
      - mountPath: /var/lib/cilium/clustermesh
        name: clustermesh-secrets
        readOnly: true
      - mountPath: /tmp/cilium/config-map
        name: cilium-config-path
        readOnly: true
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: cilium-token-zlhql
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /init-container.sh
      env:
      - name: CILIUM_ALL_STATE
        valueFrom:
          configMapKeyRef:
            key: clean-cilium-state
            name: cilium-config
            optional: true
      - name: CILIUM_BPF_STATE
        valueFrom:
          configMapKeyRef:
            key: clean-cilium-bpf-state
            name: cilium-config
            optional: true
      - name: CILIUM_WAIT_BPF_MOUNT
        valueFrom:
          configMapKeyRef:
            key: wait-bpf-mount
            name: cilium-config
            optional: true
      image: docker.io/cilium/cilium-init:2019-04-05
      imagePullPolicy: IfNotPresent
      name: clean-cilium-state
      resources: {}
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /sys/fs/bpf
        mountPropagation: HostToContainer
        name: bpf-maps
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: cilium-token-zlhql
        readOnly: true
    nodeName: pool-jyot41pzb-3z239
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: cilium
    serviceAccountName: cilium
    terminationGracePeriodSeconds: 1
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/cilium
        type: DirectoryOrCreate
      name: cilium-run
    - hostPath:
        path: /sys/fs/bpf
        type: DirectoryOrCreate
      name: bpf-maps
    - hostPath:
        path: /opt/cni/bin
        type: DirectoryOrCreate
      name: cni-path
    - hostPath:
        path: /etc/cni/net.d
        type: DirectoryOrCreate
      name: etc-cni-netd
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - configMap:
        defaultMode: 420
        items:
        - key: etcd-config
          path: etcd.config
        name: cilium-config
      name: etcd-config-path
    - name: etcd-secrets
      secret:
        defaultMode: 420
        items:
        - key: etcd-ca
          path: etcd-client-ca.crt
        - key: etcd-key
          path: etcd-client.key
        - key: etcd-cert
          path: etcd-client.crt
        secretName: etcd-secrets
    - name: clustermesh-secrets
      secret:
        defaultMode: 420
        optional: true
        secretName: cilium-clustermesh
    - configMap:
        defaultMode: 420
        name: cilium-config
      name: cilium-config-path
    - name: cilium-token-zlhql
      secret:
        defaultMode: 420
        secretName: cilium-token-zlhql
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:26:10Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:46:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:46:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://6d0600b9abde20c0301f44e38ad3daf4589354ee12b3c42fd4faabfc7ee9b117
      image: cilium/cilium:v1.8.5
      imageID: docker-pullable://cilium/cilium@sha256:3cbade4c15e7deba6b9a770475beec5e102a9f8e347c28307383a24581ebb6c4
      lastState:
        terminated:
          containerID: docker://f8f6f2ea36576073e949d4c667aa00d1df2b84e2ecda32b2669e706eaa73f9d2
          exitCode: 0
          finishedAt: "2021-01-22T15:44:45Z"
          reason: Completed
          startedAt: "2021-01-21T12:26:11Z"
      name: cilium-agent
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:45:49Z"
    hostIP: 10.133.0.4
    initContainerStatuses:
    - containerID: docker://b2d6ebe9e25ff6130556c833d070b4d02fa6dd8655729569f181159847f423a7
      image: cilium/cilium-init:2019-04-05
      imageID: docker-pullable://cilium/cilium-init@sha256:bae879d3a3c2bb599673a01d6bfa0bbf3eeb9887083479dcfb85898479b910ad
      lastState: {}
      name: clean-cilium-state
      ready: true
      restartCount: 1
      state:
        terminated:
          containerID: docker://b2d6ebe9e25ff6130556c833d070b4d02fa6dd8655729569f181159847f423a7
          exitCode: 0
          finishedAt: "2021-01-22T15:45:48Z"
          reason: Completed
          startedAt: "2021-01-22T15:45:47Z"
    phase: Running
    podIP: 10.133.0.4
    podIPs:
    - ip: 10.133.0.4
    qosClass: Burstable
    startTime: "2021-01-21T12:25:52Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: privileged-containers,non-root-user,resource-requirements,hostpath-volume
      prometheus.io/port: "9090"
      prometheus.io/scrape: "true"
    creationTimestamp: "2021-01-21T12:25:56Z"
    generateName: cilium-
    labels:
      controller-revision-hash: 7c7f7d9644
      k8s-app: cilium
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:kubernetes.io/cluster-service: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"0b1a49ac-053c-442e-98cd-f662682ece89"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"cilium-agent"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CILIUM_CLUSTERMESH_CONFIG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CILIUM_CNI_CHAINING_MODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_CUSTOM_CNI_CONF"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_FLANNEL_MASTER_DEVICE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_FLANNEL_UNINSTALL_ON_EXIT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_K8S_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"K8S_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:postStart:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:httpHeaders: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9090,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/sys/fs/bpf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp/cilium/config-map"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/cilium/clustermesh"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/etcd-config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/etcd-secrets"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/run/cilium"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"clean-cilium-state"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CILIUM_ALL_STATE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_BPF_STATE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_WAIT_BPF_MOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/sys/fs/bpf"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                k:{"mountPath":"/var/run/cilium"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"bpf-maps"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cilium-config-path"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"cilium-run"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"clustermesh-secrets"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"cni-path"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-cni-netd"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etcd-config-path"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
            k:{"name":"etcd-secrets"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:secretName: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:47:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.5"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:47:46Z"
    name: cilium-vtksh
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: cilium
      uid: 0b1a49ac-053c-442e-98cd-f662682ece89
    resourceVersion: "180566"
    selfLink: /api/v1/namespaces/kube-system/pods/cilium-vtksh
    uid: b3fe7006-e763-4272-9c54-6df6cc2d5718
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z283
    containers:
    - args:
      - --kvstore=etcd
      - --kvstore-opt=etcd.config=/var/lib/etcd-config/etcd.config
      - --k8s-require-ipv4-pod-cidr
      - --config-dir=/tmp/cilium/config-map
      command:
      - cilium-agent
      env:
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CILIUM_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CILIUM_FLANNEL_MASTER_DEVICE
        valueFrom:
          configMapKeyRef:
            key: flannel-master-device
            name: cilium-config
            optional: true
      - name: CILIUM_FLANNEL_UNINSTALL_ON_EXIT
        valueFrom:
          configMapKeyRef:
            key: flannel-uninstall-on-exit
            name: cilium-config
            optional: true
      - name: CILIUM_CLUSTERMESH_CONFIG
        value: /var/lib/cilium/clustermesh/
      - name: CILIUM_CNI_CHAINING_MODE
        valueFrom:
          configMapKeyRef:
            key: cni-chaining-mode
            name: cilium-config
            optional: true
      - name: CILIUM_CUSTOM_CNI_CONF
        valueFrom:
          configMapKeyRef:
            key: custom-cni-conf
            name: cilium-config
            optional: true
      image: docker.io/cilium/cilium:v1.8.5
      imagePullPolicy: IfNotPresent
      lifecycle:
        postStart:
          exec:
            command:
            - /cni-install.sh
        preStop:
          exec:
            command:
            - /cni-uninstall.sh
      livenessProbe:
        failureThreshold: 10
        httpGet:
          host: 127.0.0.1
          httpHeaders:
          - name: brief
            value: "true"
          path: /healthz
          port: 9876
          scheme: HTTP
        initialDelaySeconds: 120
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      name: cilium-agent
      ports:
      - containerPort: 9090
        hostPort: 9090
        name: prometheus
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cilium
          - status
          - --brief
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 300m
          memory: 300Mi
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - SYS_MODULE
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /host/opt/cni/bin
        name: cni-path
      - mountPath: /host/etc/cni/net.d
        name: etc-cni-netd
      - mountPath: /var/lib/etcd-config
        name: etcd-config-path
        readOnly: true
      - mountPath: /var/lib/etcd-secrets
        name: etcd-secrets
        readOnly: true
      - mountPath: /var/lib/cilium/clustermesh
        name: clustermesh-secrets
        readOnly: true
      - mountPath: /tmp/cilium/config-map
        name: cilium-config-path
        readOnly: true
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: cilium-token-zlhql
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /init-container.sh
      env:
      - name: CILIUM_ALL_STATE
        valueFrom:
          configMapKeyRef:
            key: clean-cilium-state
            name: cilium-config
            optional: true
      - name: CILIUM_BPF_STATE
        valueFrom:
          configMapKeyRef:
            key: clean-cilium-bpf-state
            name: cilium-config
            optional: true
      - name: CILIUM_WAIT_BPF_MOUNT
        valueFrom:
          configMapKeyRef:
            key: wait-bpf-mount
            name: cilium-config
            optional: true
      image: docker.io/cilium/cilium-init:2019-04-05
      imagePullPolicy: IfNotPresent
      name: clean-cilium-state
      resources: {}
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /sys/fs/bpf
        mountPropagation: HostToContainer
        name: bpf-maps
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: cilium-token-zlhql
        readOnly: true
    nodeName: pool-jyot41pzb-3z283
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: cilium
    serviceAccountName: cilium
    terminationGracePeriodSeconds: 1
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/cilium
        type: DirectoryOrCreate
      name: cilium-run
    - hostPath:
        path: /sys/fs/bpf
        type: DirectoryOrCreate
      name: bpf-maps
    - hostPath:
        path: /opt/cni/bin
        type: DirectoryOrCreate
      name: cni-path
    - hostPath:
        path: /etc/cni/net.d
        type: DirectoryOrCreate
      name: etc-cni-netd
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - configMap:
        defaultMode: 420
        items:
        - key: etcd-config
          path: etcd.config
        name: cilium-config
      name: etcd-config-path
    - name: etcd-secrets
      secret:
        defaultMode: 420
        items:
        - key: etcd-ca
          path: etcd-client-ca.crt
        - key: etcd-key
          path: etcd-client.key
        - key: etcd-cert
          path: etcd-client.crt
        secretName: etcd-secrets
    - name: clustermesh-secrets
      secret:
        defaultMode: 420
        optional: true
        secretName: cilium-clustermesh
    - configMap:
        defaultMode: 420
        name: cilium-config
      name: cilium-config-path
    - name: cilium-token-zlhql
      secret:
        defaultMode: 420
        secretName: cilium-token-zlhql
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:26:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:47:46Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:47:46Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:56Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b1357626d592608fed930da9b5d8dac3bc4c5122220f83b6f48148b92e40a228
      image: cilium/cilium:v1.8.5
      imageID: docker-pullable://cilium/cilium@sha256:3cbade4c15e7deba6b9a770475beec5e102a9f8e347c28307383a24581ebb6c4
      lastState:
        terminated:
          containerID: docker://492e9ebe7bd047e4043b8e44e41bcec84b9c93ab78d0229efc932453854a1f22
          exitCode: 0
          finishedAt: "2021-01-22T15:46:31Z"
          reason: Completed
          startedAt: "2021-01-21T12:26:03Z"
      name: cilium-agent
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:47:36Z"
    hostIP: 10.133.0.5
    initContainerStatuses:
    - containerID: docker://af14ea3a582df0d54416c727b63fed8dfe2c11d7d59d3930785e11b6be567f8d
      image: cilium/cilium-init:2019-04-05
      imageID: docker-pullable://cilium/cilium-init@sha256:bae879d3a3c2bb599673a01d6bfa0bbf3eeb9887083479dcfb85898479b910ad
      lastState: {}
      name: clean-cilium-state
      ready: true
      restartCount: 1
      state:
        terminated:
          containerID: docker://af14ea3a582df0d54416c727b63fed8dfe2c11d7d59d3930785e11b6be567f8d
          exitCode: 0
          finishedAt: "2021-01-22T15:47:35Z"
          reason: Completed
          startedAt: "2021-01-22T15:47:35Z"
    phase: Running
    podIP: 10.133.0.5
    podIPs:
    - ip: 10.133.0.5
    qosClass: Burstable
    startTime: "2021-01-21T12:26:00Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: privileged-containers,non-root-user,resource-requirements,hostpath-volume
      prometheus.io/port: "9090"
      prometheus.io/scrape: "true"
    creationTimestamp: "2021-01-21T12:25:32Z"
    generateName: cilium-
    labels:
      controller-revision-hash: 7c7f7d9644
      k8s-app: cilium
      kubernetes.io/cluster-service: "true"
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:kubernetes.io/cluster-service: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"0b1a49ac-053c-442e-98cd-f662682ece89"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"cilium-agent"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CILIUM_CLUSTERMESH_CONFIG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CILIUM_CNI_CHAINING_MODE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_CUSTOM_CNI_CONF"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_FLANNEL_MASTER_DEVICE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_FLANNEL_UNINSTALL_ON_EXIT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_K8S_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"K8S_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:postStart:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:httpHeaders: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9090,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/sys/fs/bpf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp/cilium/config-map"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/cilium/clustermesh"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/etcd-config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/etcd-secrets"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/run/cilium"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"clean-cilium-state"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CILIUM_ALL_STATE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_BPF_STATE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"CILIUM_WAIT_BPF_MOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/sys/fs/bpf"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                k:{"mountPath":"/var/run/cilium"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"bpf-maps"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cilium-config-path"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"cilium-run"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"clustermesh-secrets"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"cni-path"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-cni-netd"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etcd-config-path"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
            k:{"name":"etcd-secrets"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:secretName: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:42:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:43:36Z"
    name: cilium-wnfvz
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: cilium
      uid: 0b1a49ac-053c-442e-98cd-f662682ece89
    resourceVersion: "179745"
    selfLink: /api/v1/namespaces/kube-system/pods/cilium-wnfvz
    uid: 3586fac8-80f7-4a79-89ed-1d7ccd4ac552
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z28n
    containers:
    - args:
      - --kvstore=etcd
      - --kvstore-opt=etcd.config=/var/lib/etcd-config/etcd.config
      - --k8s-require-ipv4-pod-cidr
      - --config-dir=/tmp/cilium/config-map
      command:
      - cilium-agent
      env:
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CILIUM_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CILIUM_FLANNEL_MASTER_DEVICE
        valueFrom:
          configMapKeyRef:
            key: flannel-master-device
            name: cilium-config
            optional: true
      - name: CILIUM_FLANNEL_UNINSTALL_ON_EXIT
        valueFrom:
          configMapKeyRef:
            key: flannel-uninstall-on-exit
            name: cilium-config
            optional: true
      - name: CILIUM_CLUSTERMESH_CONFIG
        value: /var/lib/cilium/clustermesh/
      - name: CILIUM_CNI_CHAINING_MODE
        valueFrom:
          configMapKeyRef:
            key: cni-chaining-mode
            name: cilium-config
            optional: true
      - name: CILIUM_CUSTOM_CNI_CONF
        valueFrom:
          configMapKeyRef:
            key: custom-cni-conf
            name: cilium-config
            optional: true
      image: docker.io/cilium/cilium:v1.8.5
      imagePullPolicy: IfNotPresent
      lifecycle:
        postStart:
          exec:
            command:
            - /cni-install.sh
        preStop:
          exec:
            command:
            - /cni-uninstall.sh
      livenessProbe:
        failureThreshold: 10
        httpGet:
          host: 127.0.0.1
          httpHeaders:
          - name: brief
            value: "true"
          path: /healthz
          port: 9876
          scheme: HTTP
        initialDelaySeconds: 120
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      name: cilium-agent
      ports:
      - containerPort: 9090
        hostPort: 9090
        name: prometheus
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - cilium
          - status
          - --brief
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 300m
          memory: 300Mi
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - SYS_MODULE
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /host/opt/cni/bin
        name: cni-path
      - mountPath: /host/etc/cni/net.d
        name: etc-cni-netd
      - mountPath: /var/lib/etcd-config
        name: etcd-config-path
        readOnly: true
      - mountPath: /var/lib/etcd-secrets
        name: etcd-secrets
        readOnly: true
      - mountPath: /var/lib/cilium/clustermesh
        name: clustermesh-secrets
        readOnly: true
      - mountPath: /tmp/cilium/config-map
        name: cilium-config-path
        readOnly: true
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: cilium-token-zlhql
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /init-container.sh
      env:
      - name: CILIUM_ALL_STATE
        valueFrom:
          configMapKeyRef:
            key: clean-cilium-state
            name: cilium-config
            optional: true
      - name: CILIUM_BPF_STATE
        valueFrom:
          configMapKeyRef:
            key: clean-cilium-bpf-state
            name: cilium-config
            optional: true
      - name: CILIUM_WAIT_BPF_MOUNT
        valueFrom:
          configMapKeyRef:
            key: wait-bpf-mount
            name: cilium-config
            optional: true
      image: docker.io/cilium/cilium-init:2019-04-05
      imagePullPolicy: IfNotPresent
      name: clean-cilium-state
      resources: {}
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /sys/fs/bpf
        mountPropagation: HostToContainer
        name: bpf-maps
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: cilium-token-zlhql
        readOnly: true
    nodeName: pool-jyot41pzb-3z28n
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: cilium
    serviceAccountName: cilium
    terminationGracePeriodSeconds: 1
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/cilium
        type: DirectoryOrCreate
      name: cilium-run
    - hostPath:
        path: /sys/fs/bpf
        type: DirectoryOrCreate
      name: bpf-maps
    - hostPath:
        path: /opt/cni/bin
        type: DirectoryOrCreate
      name: cni-path
    - hostPath:
        path: /etc/cni/net.d
        type: DirectoryOrCreate
      name: etc-cni-netd
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - configMap:
        defaultMode: 420
        items:
        - key: etcd-config
          path: etcd.config
        name: cilium-config
      name: etcd-config-path
    - name: etcd-secrets
      secret:
        defaultMode: 420
        items:
        - key: etcd-ca
          path: etcd-client-ca.crt
        - key: etcd-key
          path: etcd-client.key
        - key: etcd-cert
          path: etcd-client.crt
        secretName: etcd-secrets
    - name: clustermesh-secrets
      secret:
        defaultMode: 420
        optional: true
        secretName: cilium-clustermesh
    - configMap:
        defaultMode: 420
        name: cilium-config
      name: cilium-config-path
    - name: cilium-token-zlhql
      secret:
        defaultMode: 420
        secretName: cilium-token-zlhql
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:43:36Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:43:36Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ffb90f990b9ec062ec5a8b4a2357850674ae41b358348ed4a02f059bf21b13ff
      image: cilium/cilium:v1.8.5
      imageID: docker-pullable://cilium/cilium@sha256:3cbade4c15e7deba6b9a770475beec5e102a9f8e347c28307383a24581ebb6c4
      lastState:
        terminated:
          containerID: docker://9f943e2d1844fe2b3a49721e0a0b81ab1b389106d8c29e4a53d4d34d6a350018
          exitCode: 0
          finishedAt: "2021-01-22T15:42:06Z"
          reason: Completed
          startedAt: "2021-01-21T12:25:37Z"
      name: cilium-agent
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:43:10Z"
    hostIP: 10.133.0.3
    initContainerStatuses:
    - containerID: docker://8d04bb7e5df92ab2edc7457e45a88e947d81c8bde662768787ef7672c151512e
      image: cilium/cilium-init:2019-04-05
      imageID: docker-pullable://cilium/cilium-init@sha256:bae879d3a3c2bb599673a01d6bfa0bbf3eeb9887083479dcfb85898479b910ad
      lastState: {}
      name: clean-cilium-state
      ready: true
      restartCount: 1
      state:
        terminated:
          containerID: docker://8d04bb7e5df92ab2edc7457e45a88e947d81c8bde662768787ef7672c151512e
          exitCode: 0
          finishedAt: "2021-01-22T15:43:09Z"
          reason: Completed
          startedAt: "2021-01-22T15:43:09Z"
    phase: Running
    podIP: 10.133.0.3
    podIPs:
    - ip: 10.133.0.3
    qosClass: Burstable
    startTime: "2021-01-21T12:25:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-21T12:26:45Z"
    generateName: coredns-76bcfddf46-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 76bcfddf46
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7cbc5720-4e9e-4c24-b023-3a1da4b81cef"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/coredns/custom"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:beta.kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
            k:{"name":"custom-config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:47:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.1.56"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:47:53Z"
    name: coredns-76bcfddf46-5f5p7
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-76bcfddf46
      uid: 7cbc5720-4e9e-4c24-b023-3a1da4b81cef
    resourceVersion: "180580"
    selfLink: /api/v1/namespaces/kube-system/pods/coredns-76bcfddf46-5f5p7
    uid: 98d06204-6125-4fcc-8200-d2d77a8d1523
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: docker.io/coredns/coredns:1.7.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /etc/coredns/custom
        name: custom-config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: coredns-token-d4kdd
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: pool-jyot41pzb-3z283
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - configMap:
        defaultMode: 420
        name: coredns-custom
        optional: true
      name: custom-config-volume
    - name: coredns-token-d4kdd
      secret:
        defaultMode: 420
        secretName: coredns-token-d4kdd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:26:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:47:53Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:47:53Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:26:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a4cc1faac3d53594a3128bf4366a3fa0cff8aaf5e95b0f0749b995554abad70e
      image: coredns/coredns:1.7.1
      imageID: docker-pullable://coredns/coredns@sha256:4a6e0769130686518325b21b0c1d0688b54e7c79244d48e1b15634e98e40c6ef
      lastState:
        terminated:
          containerID: docker://abc4785a4bb02dcffbf2702957c682c375015afb77d2086c4b5d2a7076454d6c
          exitCode: 0
          finishedAt: "2021-01-22T15:46:31Z"
          reason: Completed
          startedAt: "2021-01-21T12:26:47Z"
      name: coredns
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:47:42Z"
    hostIP: 10.133.0.5
    phase: Running
    podIP: 10.244.1.56
    podIPs:
    - ip: 10.244.1.56
    qosClass: Burstable
    startTime: "2021-01-21T12:26:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-21T12:26:30Z"
    generateName: coredns-76bcfddf46-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 76bcfddf46
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7cbc5720-4e9e-4c24-b023-3a1da4b81cef"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/coredns/custom"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:beta.kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
            k:{"name":"custom-config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:45:28Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.0.243"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:45:59Z"
    name: coredns-76bcfddf46-c4nc9
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-76bcfddf46
      uid: 7cbc5720-4e9e-4c24-b023-3a1da4b81cef
    resourceVersion: "180183"
    selfLink: /api/v1/namespaces/kube-system/pods/coredns-76bcfddf46-c4nc9
    uid: 060ed21c-0eae-4ea2-8d95-356b8f7471f2
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: docker.io/coredns/coredns:1.7.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /etc/coredns/custom
        name: custom-config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: coredns-token-d4kdd
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: pool-jyot41pzb-3z239
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - configMap:
        defaultMode: 420
        name: coredns-custom
        optional: true
      name: custom-config-volume
    - name: coredns-token-d4kdd
      secret:
        defaultMode: 420
        secretName: coredns-token-d4kdd
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:26:30Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:45:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:45:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:26:30Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://d956a4014b7401496920985b8e759bef5057e6689b055a382cdbed6dd1ce8aab
      image: coredns/coredns:1.7.1
      imageID: docker-pullable://coredns/coredns@sha256:4a6e0769130686518325b21b0c1d0688b54e7c79244d48e1b15634e98e40c6ef
      lastState:
        terminated:
          containerID: docker://0c6f5581eace781643949d7b44dc9267baac00e079f75668e5e86be70df4825e
          exitCode: 0
          finishedAt: "2021-01-22T15:44:45Z"
          reason: Completed
          startedAt: "2021-01-21T12:26:32Z"
      name: coredns
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:45:57Z"
    hostIP: 10.133.0.4
    phase: Running
    podIP: 10.244.0.243
    podIPs:
    - ip: 10.244.0.243
    qosClass: Burstable
    startTime: "2021-01-21T12:26:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: privileged-containers,non-root-user,resource-requirements,hostpath-volume
    creationTimestamp: "2021-01-21T12:25:51Z"
    generateName: csi-do-node-
    labels:
      app: csi-do-node
      controller-revision-hash: 5b87fbd9b
      pod-template-generation: "1"
      role: csi-do
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
            f:role: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a48f08df-d2e6-471e-93e6-c4db4e7059ac"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"csi-do-plugin"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"CSI_ENDPOINT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DIGITALOCEAN_API_URL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/csi"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/dev"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kubelet"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
            k:{"name":"csi-node-driver-registrar"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"ADDRESS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DRIVER_REG_SOCK_PATH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBE_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/csi/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/registration/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"device-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"plugin-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"pods-mount-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"registration-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:45:28Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:45:53Z"
    name: csi-do-node-5frjc
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-do-node
      uid: a48f08df-d2e6-471e-93e6-c4db4e7059ac
    resourceVersion: "180112"
    selfLink: /api/v1/namespaces/kube-system/pods/csi-do-node-5frjc
    uid: 1766e5b6-2f7d-41f9-8435-da8c4161f972
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z239
    containers:
    - args:
      - --v=5
      - --csi-address=$(ADDRESS)
      - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
      env:
      - name: ADDRESS
        value: /csi/csi.sock
      - name: DRIVER_REG_SOCK_PATH
        value: /var/lib/kubelet/plugins/dobs.csi.digitalocean.com/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/k8scsi/csi-node-driver-registrar:v2.0.1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /bin/sh
            - -c
            - rm -rf /registration/dobs.csi.digitalocean.com /registration/dobs.csi.digitalocean.com-reg.sock
      name: csi-node-driver-registrar
      resources:
        requests:
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi/
        name: plugin-dir
      - mountPath: /registration/
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: csi-do-node-sa-token-gkh2l
        readOnly: true
    - args:
      - --endpoint=$(CSI_ENDPOINT)
      - --url=$(DIGITALOCEAN_API_URL)
      - --driver-name=dobs.csi.digitalocean.com
      env:
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      - name: DIGITALOCEAN_API_URL
        value: https://api.digitalocean.com
      image: docker.io/digitalocean/do-csi-plugin:v2.1.1
      imagePullPolicy: IfNotPresent
      name: csi-do-plugin
      resources:
        requests:
          memory: 50Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: plugin-dir
      - mountPath: /var/lib/kubelet
        mountPropagation: Bidirectional
        name: pods-mount-dir
      - mountPath: /dev
        name: device-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: csi-do-node-sa-token-gkh2l
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: pool-jyot41pzb-3z239
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: csi-do-node-sa
    serviceAccountName: csi-do-node-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins_registry/
        type: DirectoryOrCreate
      name: registration-dir
    - hostPath:
        path: /var/lib/kubelet/plugins/dobs.csi.digitalocean.com
        type: DirectoryOrCreate
      name: plugin-dir
    - hostPath:
        path: /var/lib/kubelet
        type: Directory
      name: pods-mount-dir
    - hostPath:
        path: /dev
        type: ""
      name: device-dir
    - name: csi-do-node-sa-token-gkh2l
      secret:
        defaultMode: 420
        secretName: csi-do-node-sa-token-gkh2l
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:45:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:45:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://6f8e52734d70ac5403f596be6c24f430050328f8e9c5c615c468cf3164eba392
      image: digitalocean/do-csi-plugin:v2.1.1
      imageID: docker-pullable://digitalocean/do-csi-plugin@sha256:98a6080ca1de825de135caf6a8ab8a3b8ee3423f171d46979d906d32ee97600e
      lastState:
        terminated:
          containerID: docker://11f48088b857edf463448157d1d1d63c199e7f824a9dfe588780bf67ff43f638
          exitCode: 0
          finishedAt: "2021-01-22T15:44:45Z"
          reason: Completed
          startedAt: "2021-01-21T12:26:11Z"
      name: csi-do-plugin
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:45:47Z"
    - containerID: docker://b27a34d911f3194d216a16a7c4064f738f582281574105ec5628f4c16a0e27be
      image: quay.io/k8scsi/csi-node-driver-registrar:v2.0.1
      imageID: docker-pullable://quay.io/k8scsi/csi-node-driver-registrar@sha256:a104f0f0ec5fdd007a4a85ffad95a93cfb73dd7e86296d3cc7846fde505248d3
      lastState:
        terminated:
          containerID: docker://6816d4fccdb4020ba215bb0077b903e3e904f8bf0097e6f1e4662f39d298d3fe
          exitCode: 0
          finishedAt: "2021-01-22T15:44:45Z"
          reason: Completed
          startedAt: "2021-01-21T12:26:10Z"
      name: csi-node-driver-registrar
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:45:47Z"
    hostIP: 10.133.0.4
    phase: Running
    podIP: 10.133.0.4
    podIPs:
    - ip: 10.133.0.4
    qosClass: Burstable
    startTime: "2021-01-21T12:25:52Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: privileged-containers,non-root-user,resource-requirements,hostpath-volume
    creationTimestamp: "2021-01-21T12:25:56Z"
    generateName: csi-do-node-
    labels:
      app: csi-do-node
      controller-revision-hash: 5b87fbd9b
      pod-template-generation: "1"
      role: csi-do
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
            f:role: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a48f08df-d2e6-471e-93e6-c4db4e7059ac"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"csi-do-plugin"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"CSI_ENDPOINT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DIGITALOCEAN_API_URL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/csi"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/dev"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kubelet"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
            k:{"name":"csi-node-driver-registrar"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"ADDRESS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DRIVER_REG_SOCK_PATH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBE_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/csi/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/registration/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"device-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"plugin-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"pods-mount-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"registration-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:47:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.5"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:47:40Z"
    name: csi-do-node-blvkt
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-do-node
      uid: a48f08df-d2e6-471e-93e6-c4db4e7059ac
    resourceVersion: "180497"
    selfLink: /api/v1/namespaces/kube-system/pods/csi-do-node-blvkt
    uid: cd76b52c-a697-4342-8a63-9b661e771f53
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z283
    containers:
    - args:
      - --v=5
      - --csi-address=$(ADDRESS)
      - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
      env:
      - name: ADDRESS
        value: /csi/csi.sock
      - name: DRIVER_REG_SOCK_PATH
        value: /var/lib/kubelet/plugins/dobs.csi.digitalocean.com/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/k8scsi/csi-node-driver-registrar:v2.0.1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /bin/sh
            - -c
            - rm -rf /registration/dobs.csi.digitalocean.com /registration/dobs.csi.digitalocean.com-reg.sock
      name: csi-node-driver-registrar
      resources:
        requests:
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi/
        name: plugin-dir
      - mountPath: /registration/
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: csi-do-node-sa-token-gkh2l
        readOnly: true
    - args:
      - --endpoint=$(CSI_ENDPOINT)
      - --url=$(DIGITALOCEAN_API_URL)
      - --driver-name=dobs.csi.digitalocean.com
      env:
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      - name: DIGITALOCEAN_API_URL
        value: https://api.digitalocean.com
      image: docker.io/digitalocean/do-csi-plugin:v2.1.1
      imagePullPolicy: IfNotPresent
      name: csi-do-plugin
      resources:
        requests:
          memory: 50Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: plugin-dir
      - mountPath: /var/lib/kubelet
        mountPropagation: Bidirectional
        name: pods-mount-dir
      - mountPath: /dev
        name: device-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: csi-do-node-sa-token-gkh2l
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: pool-jyot41pzb-3z283
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: csi-do-node-sa
    serviceAccountName: csi-do-node-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins_registry/
        type: DirectoryOrCreate
      name: registration-dir
    - hostPath:
        path: /var/lib/kubelet/plugins/dobs.csi.digitalocean.com
        type: DirectoryOrCreate
      name: plugin-dir
    - hostPath:
        path: /var/lib/kubelet
        type: Directory
      name: pods-mount-dir
    - hostPath:
        path: /dev
        type: ""
      name: device-dir
    - name: csi-do-node-sa-token-gkh2l
      secret:
        defaultMode: 420
        secretName: csi-do-node-sa-token-gkh2l
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:26:00Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:47:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:47:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:56Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://4669b8d70efa493ff8b2a14c6e3e17e9698cec48db45a41994da74789c5d48b0
      image: digitalocean/do-csi-plugin:v2.1.1
      imageID: docker-pullable://digitalocean/do-csi-plugin@sha256:98a6080ca1de825de135caf6a8ab8a3b8ee3423f171d46979d906d32ee97600e
      lastState:
        terminated:
          containerID: docker://a5f80dc1dcc5789ee2d079682cdf8989a036c8785a7abafbd2413ea85ebc43ca
          exitCode: 0
          finishedAt: "2021-01-22T15:46:31Z"
          reason: Completed
          startedAt: "2021-01-21T12:26:02Z"
      name: csi-do-plugin
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:47:34Z"
    - containerID: docker://defd4342edafea9e77ef2174d164ac601213e141b561d3806ced8490f7d23bf7
      image: quay.io/k8scsi/csi-node-driver-registrar:v2.0.1
      imageID: docker-pullable://quay.io/k8scsi/csi-node-driver-registrar@sha256:a104f0f0ec5fdd007a4a85ffad95a93cfb73dd7e86296d3cc7846fde505248d3
      lastState:
        terminated:
          containerID: docker://8757cc0a5485c73e867edda5eb480eafaf93d29a90aec54720dc82e548f9ee37
          exitCode: 0
          finishedAt: "2021-01-22T15:46:30Z"
          reason: Completed
          startedAt: "2021-01-21T12:26:02Z"
      name: csi-node-driver-registrar
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:47:33Z"
    hostIP: 10.133.0.5
    phase: Running
    podIP: 10.133.0.5
    podIPs:
    - ip: 10.133.0.5
    qosClass: Burstable
    startTime: "2021-01-21T12:26:00Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: privileged-containers,non-root-user,resource-requirements,hostpath-volume
    creationTimestamp: "2021-01-21T12:25:33Z"
    generateName: csi-do-node-
    labels:
      app: csi-do-node
      controller-revision-hash: 5b87fbd9b
      pod-template-generation: "1"
      role: csi-do
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
            f:role: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a48f08df-d2e6-471e-93e6-c4db4e7059ac"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"csi-do-plugin"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"CSI_ENDPOINT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DIGITALOCEAN_API_URL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/csi"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/dev"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kubelet"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
            k:{"name":"csi-node-driver-registrar"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"ADDRESS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DRIVER_REG_SOCK_PATH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBE_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/csi/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/registration/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"device-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"plugin-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"pods-mount-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"registration-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:42:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:43:14Z"
    name: csi-do-node-qr6qr
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-do-node
      uid: a48f08df-d2e6-471e-93e6-c4db4e7059ac
    resourceVersion: "179662"
    selfLink: /api/v1/namespaces/kube-system/pods/csi-do-node-qr6qr
    uid: 937e79a9-4431-48a6-a408-c07b5fd0e9cb
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z28n
    containers:
    - args:
      - --v=5
      - --csi-address=$(ADDRESS)
      - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
      env:
      - name: ADDRESS
        value: /csi/csi.sock
      - name: DRIVER_REG_SOCK_PATH
        value: /var/lib/kubelet/plugins/dobs.csi.digitalocean.com/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: quay.io/k8scsi/csi-node-driver-registrar:v2.0.1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /bin/sh
            - -c
            - rm -rf /registration/dobs.csi.digitalocean.com /registration/dobs.csi.digitalocean.com-reg.sock
      name: csi-node-driver-registrar
      resources:
        requests:
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi/
        name: plugin-dir
      - mountPath: /registration/
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: csi-do-node-sa-token-gkh2l
        readOnly: true
    - args:
      - --endpoint=$(CSI_ENDPOINT)
      - --url=$(DIGITALOCEAN_API_URL)
      - --driver-name=dobs.csi.digitalocean.com
      env:
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      - name: DIGITALOCEAN_API_URL
        value: https://api.digitalocean.com
      image: docker.io/digitalocean/do-csi-plugin:v2.1.1
      imagePullPolicy: IfNotPresent
      name: csi-do-plugin
      resources:
        requests:
          memory: 50Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: plugin-dir
      - mountPath: /var/lib/kubelet
        mountPropagation: Bidirectional
        name: pods-mount-dir
      - mountPath: /dev
        name: device-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: csi-do-node-sa-token-gkh2l
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: pool-jyot41pzb-3z28n
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: csi-do-node-sa
    serviceAccountName: csi-do-node-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins_registry/
        type: DirectoryOrCreate
      name: registration-dir
    - hostPath:
        path: /var/lib/kubelet/plugins/dobs.csi.digitalocean.com
        type: DirectoryOrCreate
      name: plugin-dir
    - hostPath:
        path: /var/lib/kubelet
        type: Directory
      name: pods-mount-dir
    - hostPath:
        path: /dev
        type: ""
      name: device-dir
    - name: csi-do-node-sa-token-gkh2l
      secret:
        defaultMode: 420
        secretName: csi-do-node-sa-token-gkh2l
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:33Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:43:10Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:43:10Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a480639406b7de30acebec9d8baebb396b3a2aeecfbac9abd3162843abb3598d
      image: digitalocean/do-csi-plugin:v2.1.1
      imageID: docker-pullable://digitalocean/do-csi-plugin@sha256:98a6080ca1de825de135caf6a8ab8a3b8ee3423f171d46979d906d32ee97600e
      lastState:
        terminated:
          containerID: docker://ba93bc59605bc58f8b7697ecc8689bc1bed476fdb2f11e89995926f91c9a3fa2
          exitCode: 0
          finishedAt: "2021-01-22T15:42:06Z"
          reason: Completed
          startedAt: "2021-01-21T12:25:36Z"
      name: csi-do-plugin
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:43:09Z"
    - containerID: docker://567ec476e87aea959af267f6f9a05e76d49bc6251d4148efceb9561288e9a1f8
      image: quay.io/k8scsi/csi-node-driver-registrar:v2.0.1
      imageID: docker-pullable://quay.io/k8scsi/csi-node-driver-registrar@sha256:a104f0f0ec5fdd007a4a85ffad95a93cfb73dd7e86296d3cc7846fde505248d3
      lastState:
        terminated:
          containerID: docker://9a00459db264d48389fb28596dde166e2e3f80724c44a7e49e515609bbffc21e
          exitCode: 0
          finishedAt: "2021-01-22T15:42:06Z"
          reason: Completed
          startedAt: "2021-01-21T12:25:36Z"
      name: csi-node-driver-registrar
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:43:09Z"
    hostIP: 10.133.0.3
    phase: Running
    podIP: 10.133.0.3
    podIPs:
    - ip: 10.133.0.3
    qosClass: Burstable
    startTime: "2021-01-21T12:25:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: hostpath-volume
    creationTimestamp: "2021-01-21T12:25:57Z"
    generateName: do-node-agent-
    labels:
      app: do-node-agent
      controller-revision-hash: 6c5c55645b
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a48f4a5f-7740-44c8-82d8-ec8fef305e7f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"do-node-agent"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/proc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host/root"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host/sys"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:beta.kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:runAsNonRoot: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"proc"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"root"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"sys"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:45:28Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:45:52Z"
    name: do-node-agent-2qnnq
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: do-node-agent
      uid: a48f4a5f-7740-44c8-82d8-ec8fef305e7f
    resourceVersion: "180098"
    selfLink: /api/v1/namespaces/kube-system/pods/do-node-agent-2qnnq
    uid: 36fcbe06-728e-4768-9294-bd964cdf6d5e
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z239
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --k8s-metrics-path=http://kube-state-metrics.kube-system.svc.cluster.local:8080/metrics
      - --additional-label=kubernetes_cluster_uuid:70a0b49f-9cf4-42d3-8ad1-714846f3cdc7
      command:
      - /bin/do-agent
      image: docker.io/digitalocean/do-agent:3
      imagePullPolicy: IfNotPresent
      name: do-node-agent
      resources:
        limits:
          cpu: 102m
          memory: 100Mi
        requests:
          cpu: 102m
          memory: 80Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: do-agent-token-t6t2x
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    nodeName: pool-jyot41pzb-3z239
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: do-agent
    serviceAccountName: do-agent
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
    - name: do-agent-token-t6t2x
      secret:
        defaultMode: 420
        secretName: do-agent-token-t6t2x
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:57Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:45:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:45:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:57Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://f1577d8fd1892efd4d7d87ad2620d7a1d62f880761dbeeb80cea5a98afffd982
      image: digitalocean/do-agent:3
      imageID: docker-pullable://digitalocean/do-agent@sha256:ca1aa3966b919594b0dfde29bcbc5d86dbfe8f75c20337efeb45cd24baf2b084
      lastState:
        terminated:
          containerID: docker://523d2ebce32eb52bc578959c0372eacc7dacf49ce6a0b8112f7b14ee5d01cd43
          exitCode: 2
          finishedAt: "2021-01-22T15:44:45Z"
          reason: Error
          startedAt: "2021-01-21T12:25:59Z"
      name: do-node-agent
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:45:48Z"
    hostIP: 10.133.0.4
    phase: Running
    podIP: 10.133.0.4
    podIPs:
    - ip: 10.133.0.4
    qosClass: Burstable
    startTime: "2021-01-21T12:25:57Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: hostpath-volume
    creationTimestamp: "2021-01-21T12:26:06Z"
    generateName: do-node-agent-
    labels:
      app: do-node-agent
      controller-revision-hash: 6c5c55645b
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a48f4a5f-7740-44c8-82d8-ec8fef305e7f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"do-node-agent"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/proc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host/root"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host/sys"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:beta.kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:runAsNonRoot: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"proc"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"root"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"sys"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:47:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.5"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:47:38Z"
    name: do-node-agent-7nr8b
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: do-node-agent
      uid: a48f4a5f-7740-44c8-82d8-ec8fef305e7f
    resourceVersion: "180477"
    selfLink: /api/v1/namespaces/kube-system/pods/do-node-agent-7nr8b
    uid: b8d6d913-6dbe-448f-abf6-27d765938371
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z283
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --k8s-metrics-path=http://kube-state-metrics.kube-system.svc.cluster.local:8080/metrics
      - --additional-label=kubernetes_cluster_uuid:70a0b49f-9cf4-42d3-8ad1-714846f3cdc7
      command:
      - /bin/do-agent
      image: docker.io/digitalocean/do-agent:3
      imagePullPolicy: IfNotPresent
      name: do-node-agent
      resources:
        limits:
          cpu: 102m
          memory: 100Mi
        requests:
          cpu: 102m
          memory: 80Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: do-agent-token-t6t2x
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    nodeName: pool-jyot41pzb-3z283
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: do-agent
    serviceAccountName: do-agent
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
    - name: do-agent-token-t6t2x
      secret:
        defaultMode: 420
        secretName: do-agent-token-t6t2x
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:26:06Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:47:34Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:47:34Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:26:06Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://f4a01150a47e5b81aa59cf2fbf908ce50d7c9ffdadb2a64260539a2b6edc8277
      image: digitalocean/do-agent:3
      imageID: docker-pullable://digitalocean/do-agent@sha256:ca1aa3966b919594b0dfde29bcbc5d86dbfe8f75c20337efeb45cd24baf2b084
      lastState:
        terminated:
          containerID: docker://4aa400ebd442c12c1b610479e2264f20e3326b1a16a0955b113fcb515a85cc82
          exitCode: 2
          finishedAt: "2021-01-22T15:46:31Z"
          reason: Error
          startedAt: "2021-01-21T12:26:08Z"
      name: do-node-agent
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:47:33Z"
    hostIP: 10.133.0.5
    phase: Running
    podIP: 10.133.0.5
    podIPs:
    - ip: 10.133.0.5
    qosClass: Burstable
    startTime: "2021-01-21T12:26:06Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: hostpath-volume
    creationTimestamp: "2021-01-21T12:25:33Z"
    generateName: do-node-agent-
    labels:
      app: do-node-agent
      controller-revision-hash: 6c5c55645b
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a48f4a5f-7740-44c8-82d8-ec8fef305e7f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"do-node-agent"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/proc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host/root"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host/sys"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:beta.kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:runAsNonRoot: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"proc"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"root"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"sys"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:42:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:43:16Z"
    name: do-node-agent-drmhj
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: do-node-agent
      uid: a48f4a5f-7740-44c8-82d8-ec8fef305e7f
    resourceVersion: "179709"
    selfLink: /api/v1/namespaces/kube-system/pods/do-node-agent-drmhj
    uid: c48c43c0-a0f2-4b56-b7fd-2ae8bdefa3d6
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z28n
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --k8s-metrics-path=http://kube-state-metrics.kube-system.svc.cluster.local:8080/metrics
      - --additional-label=kubernetes_cluster_uuid:70a0b49f-9cf4-42d3-8ad1-714846f3cdc7
      command:
      - /bin/do-agent
      image: docker.io/digitalocean/do-agent:3
      imagePullPolicy: IfNotPresent
      name: do-node-agent
      resources:
        limits:
          cpu: 102m
          memory: 100Mi
        requests:
          cpu: 102m
          memory: 80Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: do-agent-token-t6t2x
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    nodeName: pool-jyot41pzb-3z28n
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: do-agent
    serviceAccountName: do-agent
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
    - name: do-agent-token-t6t2x
      secret:
        defaultMode: 420
        secretName: do-agent-token-t6t2x
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:33Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:43:11Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:43:11Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://6e43a5870bab89f385c364425c177be2f0764b1007011a9ed28720ac7046fc29
      image: digitalocean/do-agent:3
      imageID: docker-pullable://digitalocean/do-agent@sha256:ca1aa3966b919594b0dfde29bcbc5d86dbfe8f75c20337efeb45cd24baf2b084
      lastState:
        terminated:
          containerID: docker://03086775d642f83264f242e27a8bdcdeddb688db98454fb91ce7b18d606299c4
          exitCode: 2
          finishedAt: "2021-01-22T15:42:06Z"
          reason: Error
          startedAt: "2021-01-21T12:25:36Z"
      name: do-node-agent
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:43:10Z"
    hostIP: 10.133.0.3
    phase: Running
    podIP: 10.133.0.3
    podIPs:
    - ip: 10.133.0.3
    qosClass: Burstable
    startTime: "2021-01-21T12:25:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: privileged-containers,non-root-user,resource-requirements,hostpath-volume
    creationTimestamp: "2021-01-21T12:25:56Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 697dfb8c6
      k8s-app: kube-proxy
      pod-template-generation: "1"
      tier: node
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"b7abc5b2-5d38-4539-9127-c64c85e2c114"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/kubernetes/kubeconfig"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"clear-static-kube-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/manifests"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"etc-kube-manifests"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"kube-proxy-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
            k:{"name":"kube-proxy-kubeconfig"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:47:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.5"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:47:39Z"
    name: kube-proxy-24rrp
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: b7abc5b2-5d38-4539-9127-c64c85e2c114
    resourceVersion: "180490"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-24rrp
    uid: 27d53d72-a186-4f72-8a4f-0b561ca7577f
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z283
    containers:
    - command:
      - kube-proxy
      - --config=/etc/kubernetes/config/kube-proxy-config.yaml
      image: k8s.gcr.io/kube-proxy:v1.19.3
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          memory: 125Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/kubeconfig
        name: kube-proxy-kubeconfig
        readOnly: true
      - mountPath: /etc/kubernetes/config
        name: kube-proxy-config
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-ng9z9
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - sh
      - -c
      - rm -f /etc/kubernetes/manifests/kube-proxy.yaml
      image: docker.io/library/busybox:1.30
      imagePullPolicy: IfNotPresent
      name: clear-static-kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/manifests
        name: etc-kube-manifests
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-ng9z9
        readOnly: true
    nodeName: pool-jyot41pzb-3z283
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: kube-proxy-config
          path: kube-proxy-config.yaml
        name: kube-proxy
      name: kube-proxy-config
    - hostPath:
        path: /etc/kubernetes/manifests
        type: ""
      name: etc-kube-manifests
    - name: kube-proxy-kubeconfig
      secret:
        defaultMode: 420
        items:
        - key: kube-proxy.kubeconfig
          path: kube-proxy.kubeconfig
        secretName: kube-proxy
    - name: kube-proxy-token-ng9z9
      secret:
        defaultMode: 420
        secretName: kube-proxy-token-ng9z9
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:26:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:47:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:47:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:56Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://1c9d0b1265f2c2f82b31aca54c0ca666e6099f343551fedd2dd18e9cb8e0d67c
      image: k8s.gcr.io/kube-proxy:v1.19.3
      imageID: docker-pullable://k8s.gcr.io/kube-proxy@sha256:1f99b26aad3a90358ad83b4065cf59002b5a913e839b70744caff4a84315a2e7
      lastState:
        terminated:
          containerID: docker://269725215f26bbf5ab955da7826fcead2effa2fa28cf2fb94a48d306180756c8
          exitCode: 2
          finishedAt: "2021-01-22T15:46:31Z"
          reason: Error
          startedAt: "2021-01-21T12:26:03Z"
      name: kube-proxy
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:47:34Z"
    hostIP: 10.133.0.5
    initContainerStatuses:
    - containerID: docker://0f8a618b0b409323e24f23071452cbb2de60aadc60b8d5a6907f6b0e37df5dd0
      image: busybox:1.30
      imageID: docker-pullable://busybox@sha256:4b6ad3a68d34da29bf7c8ccb5d355ba8b4babcad1f99798204e7abb43e54ee3d
      lastState: {}
      name: clear-static-kube-proxy
      ready: true
      restartCount: 1
      state:
        terminated:
          containerID: docker://0f8a618b0b409323e24f23071452cbb2de60aadc60b8d5a6907f6b0e37df5dd0
          exitCode: 0
          finishedAt: "2021-01-22T15:47:33Z"
          reason: Completed
          startedAt: "2021-01-22T15:47:33Z"
    phase: Running
    podIP: 10.133.0.5
    podIPs:
    - ip: 10.133.0.5
    qosClass: Burstable
    startTime: "2021-01-21T12:26:00Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: privileged-containers,non-root-user,resource-requirements,hostpath-volume
    creationTimestamp: "2021-01-21T12:25:51Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 697dfb8c6
      k8s-app: kube-proxy
      pod-template-generation: "1"
      tier: node
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"b7abc5b2-5d38-4539-9127-c64c85e2c114"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/kubernetes/kubeconfig"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"clear-static-kube-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/manifests"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"etc-kube-manifests"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"kube-proxy-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
            k:{"name":"kube-proxy-kubeconfig"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:45:28Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:45:54Z"
    name: kube-proxy-8lhdk
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: b7abc5b2-5d38-4539-9127-c64c85e2c114
    resourceVersion: "180120"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-8lhdk
    uid: 2c97398e-918e-4ce3-adb6-f4af7338b0da
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z239
    containers:
    - command:
      - kube-proxy
      - --config=/etc/kubernetes/config/kube-proxy-config.yaml
      image: k8s.gcr.io/kube-proxy:v1.19.3
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          memory: 125Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/kubeconfig
        name: kube-proxy-kubeconfig
        readOnly: true
      - mountPath: /etc/kubernetes/config
        name: kube-proxy-config
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-ng9z9
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - sh
      - -c
      - rm -f /etc/kubernetes/manifests/kube-proxy.yaml
      image: docker.io/library/busybox:1.30
      imagePullPolicy: IfNotPresent
      name: clear-static-kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/manifests
        name: etc-kube-manifests
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-ng9z9
        readOnly: true
    nodeName: pool-jyot41pzb-3z239
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: kube-proxy-config
          path: kube-proxy-config.yaml
        name: kube-proxy
      name: kube-proxy-config
    - hostPath:
        path: /etc/kubernetes/manifests
        type: ""
      name: etc-kube-manifests
    - name: kube-proxy-kubeconfig
      secret:
        defaultMode: 420
        items:
        - key: kube-proxy.kubeconfig
          path: kube-proxy.kubeconfig
        secretName: kube-proxy
    - name: kube-proxy-token-ng9z9
      secret:
        defaultMode: 420
        secretName: kube-proxy-token-ng9z9
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:26:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:45:49Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:45:49Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://489879b3d4f5e7ad15854e820e19c5173434d88543e166c5e30165a9b3ae3d12
      image: k8s.gcr.io/kube-proxy:v1.19.3
      imageID: docker-pullable://k8s.gcr.io/kube-proxy@sha256:1f99b26aad3a90358ad83b4065cf59002b5a913e839b70744caff4a84315a2e7
      lastState:
        terminated:
          containerID: docker://d4c3de2df82472a193c2ce246cfb3d215bb16e114929dbd5917fb659ae4c1629
          exitCode: 2
          finishedAt: "2021-01-22T15:44:45Z"
          reason: Error
          startedAt: "2021-01-21T12:26:09Z"
      name: kube-proxy
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:45:49Z"
    hostIP: 10.133.0.4
    initContainerStatuses:
    - containerID: docker://a816e508022f8b7c88318d5bdc8bc07e59fabd6f7d6a23636edd56b39d2baf52
      image: busybox:1.30
      imageID: docker-pullable://busybox@sha256:4b6ad3a68d34da29bf7c8ccb5d355ba8b4babcad1f99798204e7abb43e54ee3d
      lastState: {}
      name: clear-static-kube-proxy
      ready: true
      restartCount: 1
      state:
        terminated:
          containerID: docker://a816e508022f8b7c88318d5bdc8bc07e59fabd6f7d6a23636edd56b39d2baf52
          exitCode: 0
          finishedAt: "2021-01-22T15:45:47Z"
          reason: Completed
          startedAt: "2021-01-22T15:45:47Z"
    phase: Running
    podIP: 10.133.0.4
    podIPs:
    - ip: 10.133.0.4
    qosClass: Burstable
    startTime: "2021-01-21T12:25:52Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      clusterlint.digitalocean.com/disabled-checks: privileged-containers,non-root-user,resource-requirements,hostpath-volume
    creationTimestamp: "2021-01-21T12:25:32Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 697dfb8c6
      k8s-app: kube-proxy
      pod-template-generation: "1"
      tier: node
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:clusterlint.digitalocean.com/disabled-checks: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"b7abc5b2-5d38-4539-9127-c64c85e2c114"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/kubernetes/kubeconfig"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"clear-static-kube-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/manifests"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"etc-kube-manifests"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"kube-proxy-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
            k:{"name":"kube-proxy-kubeconfig"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:42:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:43:17Z"
    name: kube-proxy-k7grw
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: b7abc5b2-5d38-4539-9127-c64c85e2c114
    resourceVersion: "179716"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-k7grw
    uid: 99f98330-867b-44d5-acfb-e998aa60df4f
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z28n
    containers:
    - command:
      - kube-proxy
      - --config=/etc/kubernetes/config/kube-proxy-config.yaml
      image: k8s.gcr.io/kube-proxy:v1.19.3
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          memory: 125Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/kubeconfig
        name: kube-proxy-kubeconfig
        readOnly: true
      - mountPath: /etc/kubernetes/config
        name: kube-proxy-config
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-ng9z9
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - sh
      - -c
      - rm -f /etc/kubernetes/manifests/kube-proxy.yaml
      image: docker.io/library/busybox:1.30
      imagePullPolicy: IfNotPresent
      name: clear-static-kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/manifests
        name: etc-kube-manifests
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-ng9z9
        readOnly: true
    nodeName: pool-jyot41pzb-3z28n
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: kube-proxy-config
          path: kube-proxy-config.yaml
        name: kube-proxy
      name: kube-proxy-config
    - hostPath:
        path: /etc/kubernetes/manifests
        type: ""
      name: etc-kube-manifests
    - name: kube-proxy-kubeconfig
      secret:
        defaultMode: 420
        items:
        - key: kube-proxy.kubeconfig
          path: kube-proxy.kubeconfig
        secretName: kube-proxy
    - name: kube-proxy-token-ng9z9
      secret:
        defaultMode: 420
        secretName: kube-proxy-token-ng9z9
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:43:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:43:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:25:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ce4417a269e1f036e1c27eba8dddd21df7a7bfb67396019384e6951877f92098
      image: k8s.gcr.io/kube-proxy:v1.19.3
      imageID: docker-pullable://k8s.gcr.io/kube-proxy@sha256:1f99b26aad3a90358ad83b4065cf59002b5a913e839b70744caff4a84315a2e7
      lastState:
        terminated:
          containerID: docker://c8f9e0822f5e751be6d1b7eb4a301c2435dedd8a8ed91dc6627451edfc761cd8
          exitCode: 2
          finishedAt: "2021-01-22T15:42:06Z"
          reason: Error
          startedAt: "2021-01-21T12:25:37Z"
      name: kube-proxy
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:43:11Z"
    hostIP: 10.133.0.3
    initContainerStatuses:
    - containerID: docker://a447fdf4cbd1e3b605404b63900697bff096e064ec4dba01f253e1796a0efa45
      image: busybox:1.30
      imageID: docker-pullable://busybox@sha256:4b6ad3a68d34da29bf7c8ccb5d355ba8b4babcad1f99798204e7abb43e54ee3d
      lastState: {}
      name: clear-static-kube-proxy
      ready: true
      restartCount: 1
      state:
        terminated:
          containerID: docker://a447fdf4cbd1e3b605404b63900697bff096e064ec4dba01f253e1796a0efa45
          exitCode: 0
          finishedAt: "2021-01-22T15:43:10Z"
          reason: Completed
          startedAt: "2021-01-22T15:43:10Z"
    phase: Running
    podIP: 10.133.0.3
    podIPs:
    - ip: 10.133.0.3
    qosClass: Burstable
    startTime: "2021-01-21T12:25:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-21T12:32:54Z"
    generateName: weave-net-
    labels:
      controller-revision-hash: 5556979c45
      name: weave-net
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"d5d4c2e9-9705-427f-b0a9-7f295701e169"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"weave"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"HOSTNAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"INIT_CONTAINER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/var/lib/dbus"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/weavedb"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"weave-npc"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"HOSTNAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"weave-init"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/home"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:seLinuxOptions: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-bin2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-conf"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"dbus"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"weavedb"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:42:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:44:08Z"
    name: weave-net-99dlt
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: weave-net
      uid: d5d4c2e9-9705-427f-b0a9-7f295701e169
    resourceVersion: "179826"
    selfLink: /api/v1/namespaces/kube-system/pods/weave-net-99dlt
    uid: a907a96f-f65e-4d75-a461-b5bd24dc2881
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z28n
    containers:
    - command:
      - /home/weave/launch.sh
      env:
      - name: HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: INIT_CONTAINER
        value: "true"
      image: docker.io/weaveworks/weave-kube:2.8.0
      imagePullPolicy: IfNotPresent
      name: weave
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 127.0.0.1
          path: /status
          port: 6784
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /weavedb
        name: weavedb
      - mountPath: /host/var/lib/dbus
        name: dbus
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-v6qnp
        readOnly: true
    - env:
      - name: HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: docker.io/weaveworks/weave-npc:2.8.0
      imagePullPolicy: IfNotPresent
      name: weave-npc
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-v6qnp
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /home/weave/init.sh
      image: docker.io/weaveworks/weave-kube:2.8.0
      imagePullPolicy: IfNotPresent
      name: weave-init
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt
        name: cni-bin
      - mountPath: /host/home
        name: cni-bin2
      - mountPath: /host/etc
        name: cni-conf
      - mountPath: /lib/modules
        name: lib-modules
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-v6qnp
        readOnly: true
    nodeName: pool-jyot41pzb-3z28n
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seLinuxOptions: {}
    serviceAccount: weave-net
    serviceAccountName: weave-net
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/weave
        type: ""
      name: weavedb
    - hostPath:
        path: /opt
        type: ""
      name: cni-bin
    - hostPath:
        path: /home
        type: ""
      name: cni-bin2
    - hostPath:
        path: /etc
        type: ""
      name: cni-conf
    - hostPath:
        path: /var/lib/dbus
        type: ""
      name: dbus
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: weave-net-token-v6qnp
      secret:
        defaultMode: 420
        secretName: weave-net-token-v6qnp
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:43:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:44:08Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:44:08Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:32:55Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://d7e2a2c69e232dcb626bc1b282b4c1dd83547be8dfb0015e238dc8cf9391a67f
      image: weaveworks/weave-kube:2.8.0
      imageID: docker-pullable://weaveworks/weave-kube@sha256:7ded1c4be2d00dd81e824736a69d269037d82766d175107c1340796b4b926321
      lastState:
        terminated:
          containerID: docker://0202df396427310a17c3c5f158ef0ff78d17accee7525a352d83dfd0171235d9
          exitCode: 1
          finishedAt: "2021-01-22T15:43:43Z"
          reason: Error
          startedAt: "2021-01-22T15:43:11Z"
      name: weave
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:43:58Z"
    - containerID: docker://53b53da7a75ed620882f948bd85587216d7ec09de8882a2cfffd6adaec6f2d7b
      image: weaveworks/weave-npc:2.8.0
      imageID: docker-pullable://weaveworks/weave-npc@sha256:2d683887a8e5809926ace9b354b952f7d0f6c5ea02c907cc9e692ec57eb8f540
      lastState:
        terminated:
          containerID: docker://ffc2a04e242ed730d5c5298de1f401bb1816f947cb4891c3e5b09253c9a4032d
          exitCode: 1
          finishedAt: "2021-01-22T15:42:06Z"
          reason: Error
          startedAt: "2021-01-21T12:33:05Z"
      name: weave-npc
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:43:12Z"
    hostIP: 10.133.0.3
    initContainerStatuses:
    - containerID: docker://da62beff9953bd8146373086da9e13c64e7b538f7f50bfcef196588cf717372a
      image: weaveworks/weave-kube:2.8.0
      imageID: docker-pullable://weaveworks/weave-kube@sha256:7ded1c4be2d00dd81e824736a69d269037d82766d175107c1340796b4b926321
      lastState: {}
      name: weave-init
      ready: true
      restartCount: 1
      state:
        terminated:
          containerID: docker://da62beff9953bd8146373086da9e13c64e7b538f7f50bfcef196588cf717372a
          exitCode: 0
          finishedAt: "2021-01-22T15:43:11Z"
          reason: Completed
          startedAt: "2021-01-22T15:43:10Z"
    phase: Running
    podIP: 10.133.0.3
    podIPs:
    - ip: 10.133.0.3
    qosClass: Burstable
    startTime: "2021-01-21T12:32:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-21T12:32:54Z"
    generateName: weave-net-
    labels:
      controller-revision-hash: 5556979c45
      name: weave-net
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"d5d4c2e9-9705-427f-b0a9-7f295701e169"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"weave"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"HOSTNAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"INIT_CONTAINER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/var/lib/dbus"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/weavedb"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"weave-npc"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"HOSTNAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"weave-init"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/home"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:seLinuxOptions: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-bin2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-conf"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"dbus"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"weavedb"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:45:28Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:45:57Z"
    name: weave-net-b52zr
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: weave-net
      uid: d5d4c2e9-9705-427f-b0a9-7f295701e169
    resourceVersion: "180164"
    selfLink: /api/v1/namespaces/kube-system/pods/weave-net-b52zr
    uid: e4447516-61f3-4e8c-9c38-966073f66a70
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z239
    containers:
    - command:
      - /home/weave/launch.sh
      env:
      - name: HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: INIT_CONTAINER
        value: "true"
      image: docker.io/weaveworks/weave-kube:2.8.0
      imagePullPolicy: IfNotPresent
      name: weave
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 127.0.0.1
          path: /status
          port: 6784
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /weavedb
        name: weavedb
      - mountPath: /host/var/lib/dbus
        name: dbus
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-v6qnp
        readOnly: true
    - env:
      - name: HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: docker.io/weaveworks/weave-npc:2.8.0
      imagePullPolicy: IfNotPresent
      name: weave-npc
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-v6qnp
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /home/weave/init.sh
      image: docker.io/weaveworks/weave-kube:2.8.0
      imagePullPolicy: IfNotPresent
      name: weave-init
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt
        name: cni-bin
      - mountPath: /host/home
        name: cni-bin2
      - mountPath: /host/etc
        name: cni-conf
      - mountPath: /lib/modules
        name: lib-modules
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-v6qnp
        readOnly: true
    nodeName: pool-jyot41pzb-3z239
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seLinuxOptions: {}
    serviceAccount: weave-net
    serviceAccountName: weave-net
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/weave
        type: ""
      name: weavedb
    - hostPath:
        path: /opt
        type: ""
      name: cni-bin
    - hostPath:
        path: /home
        type: ""
      name: cni-bin2
    - hostPath:
        path: /etc
        type: ""
      name: cni-conf
    - hostPath:
        path: /var/lib/dbus
        type: ""
      name: dbus
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: weave-net-token-v6qnp
      secret:
        defaultMode: 420
        secretName: weave-net-token-v6qnp
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:45:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:45:57Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:45:57Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:32:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://51de7e0c0c153bf0f1b0ed4af7a215b7d86f0bc4cccb2ddccce4d974cde909f5
      image: weaveworks/weave-kube:2.8.0
      imageID: docker-pullable://weaveworks/weave-kube@sha256:7ded1c4be2d00dd81e824736a69d269037d82766d175107c1340796b4b926321
      lastState:
        terminated:
          containerID: docker://108fb2b40d3df3c20be8ab3ce81d7af82c9095675085768c82b4833fdce91f5c
          exitCode: 137
          finishedAt: "2021-01-22T15:44:55Z"
          reason: Error
          startedAt: "2021-01-21T12:33:02Z"
      name: weave
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:45:51Z"
    - containerID: docker://53986e7d463fc116be05eeaa53e34827714b753de12523328a87ddc6bbf59ba2
      image: weaveworks/weave-npc:2.8.0
      imageID: docker-pullable://weaveworks/weave-npc@sha256:2d683887a8e5809926ace9b354b952f7d0f6c5ea02c907cc9e692ec57eb8f540
      lastState:
        terminated:
          containerID: docker://7a011ce0c1d62f5cef1ab93e97dcfc8641790c53737ae7503794056687f3fd39
          exitCode: 1
          finishedAt: "2021-01-22T15:44:45Z"
          reason: Error
          startedAt: "2021-01-21T12:33:06Z"
      name: weave-npc
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:45:51Z"
    hostIP: 10.133.0.4
    initContainerStatuses:
    - containerID: docker://783e62dd6f73874f83f65daf1c93f45d38510fbddbc5ec316609965d68b42828
      image: weaveworks/weave-kube:2.8.0
      imageID: docker-pullable://weaveworks/weave-kube@sha256:7ded1c4be2d00dd81e824736a69d269037d82766d175107c1340796b4b926321
      lastState: {}
      name: weave-init
      ready: true
      restartCount: 1
      state:
        terminated:
          containerID: docker://783e62dd6f73874f83f65daf1c93f45d38510fbddbc5ec316609965d68b42828
          exitCode: 0
          finishedAt: "2021-01-22T15:45:50Z"
          reason: Completed
          startedAt: "2021-01-22T15:45:49Z"
    phase: Running
    podIP: 10.133.0.4
    podIPs:
    - ip: 10.133.0.4
    qosClass: Burstable
    startTime: "2021-01-21T12:32:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-21T12:32:54Z"
    generateName: weave-net-
    labels:
      controller-revision-hash: 5556979c45
      name: weave-net
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"d5d4c2e9-9705-427f-b0a9-7f295701e169"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"weave"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"HOSTNAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"INIT_CONTAINER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/var/lib/dbus"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/weavedb"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"weave-npc"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"HOSTNAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"weave-init"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/home"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:seLinuxOptions: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-bin2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-conf"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"dbus"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"weavedb"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:47:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.133.0.5"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-22T15:47:46Z"
    name: weave-net-zf9kk
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: weave-net
      uid: d5d4c2e9-9705-427f-b0a9-7f295701e169
    resourceVersion: "180563"
    selfLink: /api/v1/namespaces/kube-system/pods/weave-net-zf9kk
    uid: 4072a3e0-ed8c-4ac5-9aa9-c284b90845ec
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - pool-jyot41pzb-3z283
    containers:
    - command:
      - /home/weave/launch.sh
      env:
      - name: HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: INIT_CONTAINER
        value: "true"
      image: docker.io/weaveworks/weave-kube:2.8.0
      imagePullPolicy: IfNotPresent
      name: weave
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 127.0.0.1
          path: /status
          port: 6784
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /weavedb
        name: weavedb
      - mountPath: /host/var/lib/dbus
        name: dbus
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-v6qnp
        readOnly: true
    - env:
      - name: HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: docker.io/weaveworks/weave-npc:2.8.0
      imagePullPolicy: IfNotPresent
      name: weave-npc
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-v6qnp
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /home/weave/init.sh
      image: docker.io/weaveworks/weave-kube:2.8.0
      imagePullPolicy: IfNotPresent
      name: weave-init
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt
        name: cni-bin
      - mountPath: /host/home
        name: cni-bin2
      - mountPath: /host/etc
        name: cni-conf
      - mountPath: /lib/modules
        name: lib-modules
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-v6qnp
        readOnly: true
    nodeName: pool-jyot41pzb-3z283
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seLinuxOptions: {}
    serviceAccount: weave-net
    serviceAccountName: weave-net
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/weave
        type: ""
      name: weavedb
    - hostPath:
        path: /opt
        type: ""
      name: cni-bin
    - hostPath:
        path: /home
        type: ""
      name: cni-bin2
    - hostPath:
        path: /etc
        type: ""
      name: cni-conf
    - hostPath:
        path: /var/lib/dbus
        type: ""
      name: dbus
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: weave-net-token-v6qnp
      secret:
        defaultMode: 420
        secretName: weave-net-token-v6qnp
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:47:36Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:47:46Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-22T15:47:46Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-21T12:32:55Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://eff910742e871052998aa4c5ce4509cb541a47cda498c765efbb54d0b407a9b3
      image: weaveworks/weave-kube:2.8.0
      imageID: docker-pullable://weaveworks/weave-kube@sha256:7ded1c4be2d00dd81e824736a69d269037d82766d175107c1340796b4b926321
      lastState:
        terminated:
          containerID: docker://192ba2dd393d95c72ce0b38cd4fcd66e19f6d67cb5c4507531daa8bf7d3d631d
          exitCode: 137
          finishedAt: "2021-01-22T15:46:41Z"
          reason: Error
          startedAt: "2021-01-21T12:33:03Z"
      name: weave
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:47:36Z"
    - containerID: docker://d4af657764c698b35ee8fe51cbef8e8dd3ecbbd886718b06234555990f5ae579
      image: weaveworks/weave-npc:2.8.0
      imageID: docker-pullable://weaveworks/weave-npc@sha256:2d683887a8e5809926ace9b354b952f7d0f6c5ea02c907cc9e692ec57eb8f540
      lastState:
        terminated:
          containerID: docker://819b8b6d1486c1d6daee7074bd7c9fe8a9d6fdc49d1faf7d051c358e32b68817
          exitCode: 1
          finishedAt: "2021-01-22T15:46:31Z"
          reason: Error
          startedAt: "2021-01-21T12:33:07Z"
      name: weave-npc
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-22T15:47:36Z"
    hostIP: 10.133.0.5
    initContainerStatuses:
    - containerID: docker://468d7576a5a3aedb559103f1f72ce22879d66323f90a180e787988b22851f841
      image: weaveworks/weave-kube:2.8.0
      imageID: docker-pullable://weaveworks/weave-kube@sha256:7ded1c4be2d00dd81e824736a69d269037d82766d175107c1340796b4b926321
      lastState: {}
      name: weave-init
      ready: true
      restartCount: 1
      state:
        terminated:
          containerID: docker://468d7576a5a3aedb559103f1f72ce22879d66323f90a180e787988b22851f841
          exitCode: 0
          finishedAt: "2021-01-22T15:47:35Z"
          reason: Completed
          startedAt: "2021-01-22T15:47:34Z"
    phase: Running
    podIP: 10.133.0.5
    podIPs:
    - ip: 10.133.0.5
    qosClass: Burstable
    startTime: "2021-01-21T12:32:55Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"prometheus.io/port":"9153","prometheus.io/scrape":"true"},"labels":{"k8s-app":"kube-dns","kubernetes.io/cluster-service":"true","kubernetes.io/name":"CoreDNS"},"name":"kube-dns","namespace":"kube-system","resourceVersion":"0"},"spec":{"clusterIP":"10.245.0.10","ports":[{"name":"dns","port":53,"protocol":"UDP"},{"name":"dns-tcp","port":53,"protocol":"TCP"},{"name":"metrics","port":9153,"protocol":"TCP"}],"selector":{"k8s-app":"kube-dns"}}}
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    creationTimestamp: "2021-01-21T12:23:30Z"
    labels:
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: CoreDNS
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:kubernetes.io/cluster-service: {}
            f:kubernetes.io/name: {}
        f:spec:
          f:clusterIP: {}
          f:ports:
            .: {}
            k:{"port":53,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":53,"protocol":"UDP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":9153,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-21T12:23:30Z"
    name: kube-dns
    namespace: kube-system
    resourceVersion: "211"
    selfLink: /api/v1/namespaces/kube-system/services/kube-dns
    uid: 553851c1-ead8-4349-8907-99f0b04af0c6
  spec:
    clusterIP: 10.245.0.10
    ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    - name: metrics
      port: 9153
      protocol: TCP
      targetPort: 9153
    selector:
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"k8s-app":"cilium","kubernetes.io/cluster-service":"true"},"name":"cilium","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"cilium","kubernetes.io/cluster-service":"true"}},"template":{"metadata":{"annotations":{"clusterlint.digitalocean.com/disabled-checks":"privileged-containers,non-root-user,resource-requirements,hostpath-volume","prometheus.io/port":"9090","prometheus.io/scrape":"true"},"labels":{"k8s-app":"cilium","kubernetes.io/cluster-service":"true"}},"spec":{"containers":[{"args":["--kvstore=etcd","--kvstore-opt=etcd.config=/var/lib/etcd-config/etcd.config","--k8s-require-ipv4-pod-cidr","--config-dir=/tmp/cilium/config-map"],"command":["cilium-agent"],"env":[{"name":"K8S_NODE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}},{"name":"CILIUM_K8S_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"CILIUM_FLANNEL_MASTER_DEVICE","valueFrom":{"configMapKeyRef":{"key":"flannel-master-device","name":"cilium-config","optional":true}}},{"name":"CILIUM_FLANNEL_UNINSTALL_ON_EXIT","valueFrom":{"configMapKeyRef":{"key":"flannel-uninstall-on-exit","name":"cilium-config","optional":true}}},{"name":"CILIUM_CLUSTERMESH_CONFIG","value":"/var/lib/cilium/clustermesh/"},{"name":"CILIUM_CNI_CHAINING_MODE","valueFrom":{"configMapKeyRef":{"key":"cni-chaining-mode","name":"cilium-config","optional":true}}},{"name":"CILIUM_CUSTOM_CNI_CONF","valueFrom":{"configMapKeyRef":{"key":"custom-cni-conf","name":"cilium-config","optional":true}}}],"image":"docker.io/cilium/cilium:v1.8.5","imagePullPolicy":"IfNotPresent","lifecycle":{"postStart":{"exec":{"command":["/cni-install.sh"]}},"preStop":{"exec":{"command":["/cni-uninstall.sh"]}}},"livenessProbe":{"failureThreshold":10,"httpGet":{"host":"127.0.0.1","httpHeaders":[{"name":"brief","value":"true"}],"path":"/healthz","port":9876,"scheme":"HTTP"},"initialDelaySeconds":120,"periodSeconds":30,"successThreshold":1,"timeoutSeconds":5},"name":"cilium-agent","ports":[{"containerPort":9090,"hostPort":9090,"name":"prometheus","protocol":"TCP"}],"readinessProbe":{"exec":{"command":["cilium","status","--brief"]},"failureThreshold":3,"initialDelaySeconds":5,"periodSeconds":30,"successThreshold":1,"timeoutSeconds":5},"resources":{"requests":{"cpu":"300m","memory":"300Mi"}},"securityContext":{"capabilities":{"add":["NET_ADMIN","SYS_MODULE"]},"privileged":true},"volumeMounts":[{"mountPath":"/sys/fs/bpf","name":"bpf-maps"},{"mountPath":"/var/run/cilium","name":"cilium-run"},{"mountPath":"/host/opt/cni/bin","name":"cni-path"},{"mountPath":"/host/etc/cni/net.d","name":"etc-cni-netd"},{"mountPath":"/var/lib/etcd-config","name":"etcd-config-path","readOnly":true},{"mountPath":"/var/lib/etcd-secrets","name":"etcd-secrets","readOnly":true},{"mountPath":"/var/lib/cilium/clustermesh","name":"clustermesh-secrets","readOnly":true},{"mountPath":"/tmp/cilium/config-map","name":"cilium-config-path","readOnly":true},{"mountPath":"/lib/modules","name":"lib-modules","readOnly":true},{"mountPath":"/run/xtables.lock","name":"xtables-lock"}]}],"dnsPolicy":"ClusterFirst","hostNetwork":true,"initContainers":[{"command":["/init-container.sh"],"env":[{"name":"CILIUM_ALL_STATE","valueFrom":{"configMapKeyRef":{"key":"clean-cilium-state","name":"cilium-config","optional":true}}},{"name":"CILIUM_BPF_STATE","valueFrom":{"configMapKeyRef":{"key":"clean-cilium-bpf-state","name":"cilium-config","optional":true}}},{"name":"CILIUM_WAIT_BPF_MOUNT","valueFrom":{"configMapKeyRef":{"key":"wait-bpf-mount","name":"cilium-config","optional":true}}}],"image":"docker.io/cilium/cilium-init:2019-04-05","imagePullPolicy":"IfNotPresent","name":"clean-cilium-state","securityContext":{"capabilities":{"add":["NET_ADMIN"]},"privileged":true},"volumeMounts":[{"mountPath":"/sys/fs/bpf","mountPropagation":"HostToContainer","name":"bpf-maps"},{"mountPath":"/var/run/cilium","name":"cilium-run"}]}],"priorityClassName":"system-node-critical","restartPolicy":"Always","serviceAccount":"cilium","serviceAccountName":"cilium","terminationGracePeriodSeconds":1,"tolerations":[{"operator":"Exists"}],"volumes":[{"hostPath":{"path":"/var/run/cilium","type":"DirectoryOrCreate"},"name":"cilium-run"},{"hostPath":{"path":"/sys/fs/bpf","type":"DirectoryOrCreate"},"name":"bpf-maps"},{"hostPath":{"path":"/opt/cni/bin","type":"DirectoryOrCreate"},"name":"cni-path"},{"hostPath":{"path":"/etc/cni/net.d","type":"DirectoryOrCreate"},"name":"etc-cni-netd"},{"hostPath":{"path":"/lib/modules"},"name":"lib-modules"},{"hostPath":{"path":"/run/xtables.lock","type":"FileOrCreate"},"name":"xtables-lock"},{"configMap":{"defaultMode":420,"items":[{"key":"etcd-config","path":"etcd.config"}],"name":"cilium-config"},"name":"etcd-config-path"},{"name":"etcd-secrets","secret":{"items":[{"key":"etcd-ca","path":"etcd-client-ca.crt"},{"key":"etcd-key","path":"etcd-client.key"},{"key":"etcd-cert","path":"etcd-client.crt"}],"secretName":"etcd-secrets"}},{"name":"clustermesh-secrets","secret":{"defaultMode":420,"optional":true,"secretName":"cilium-clustermesh"}},{"configMap":{"name":"cilium-config"},"name":"cilium-config-path"}]}},"updateStrategy":{"type":"OnDelete"}}}
    creationTimestamp: "2021-01-21T12:23:29Z"
    generation: 1
    labels:
      k8s-app: cilium
      kubernetes.io/cluster-service: "true"
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deprecated.daemonset.template.generation: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:kubernetes.io/cluster-service: {}
        f:spec:
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:kubernetes.io/cluster-service: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:clusterlint.digitalocean.com/disabled-checks: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
              f:labels:
                .: {}
                f:k8s-app: {}
                f:kubernetes.io/cluster-service: {}
            f:spec:
              f:containers:
                k:{"name":"cilium-agent"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"CILIUM_CLUSTERMESH_CONFIG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CILIUM_CNI_CHAINING_MODE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_CUSTOM_CNI_CONF"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_FLANNEL_MASTER_DEVICE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_FLANNEL_UNINSTALL_ON_EXIT"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_K8S_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"K8S_NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:postStart:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:httpHeaders: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/host/etc/cni/net.d"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/host/opt/cni/bin"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/lib/modules"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/run/xtables.lock"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/sys/fs/bpf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/cilium/config-map"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/var/lib/cilium/clustermesh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/var/lib/etcd-config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/var/lib/etcd-secrets"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/var/run/cilium"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:initContainers:
                .: {}
                k:{"name":"clean-cilium-state"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"CILIUM_ALL_STATE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_BPF_STATE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_WAIT_BPF_MOUNT"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/sys/fs/bpf"}:
                      .: {}
                      f:mountPath: {}
                      f:mountPropagation: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/cilium"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"bpf-maps"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"cilium-config-path"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"cilium-run"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"clustermesh-secrets"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"cni-path"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"etc-cni-netd"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"etcd-config-path"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"etcd-secrets"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:secretName: {}
                k:{"name":"lib-modules"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"xtables-lock"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-21T12:23:29Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberAvailable: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:47:46Z"
    name: cilium
    namespace: kube-system
    resourceVersion: "180567"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/cilium
    uid: 0b1a49ac-053c-442e-98cd-f662682ece89
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: cilium
        kubernetes.io/cluster-service: "true"
    template:
      metadata:
        annotations:
          clusterlint.digitalocean.com/disabled-checks: privileged-containers,non-root-user,resource-requirements,hostpath-volume
          prometheus.io/port: "9090"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          k8s-app: cilium
          kubernetes.io/cluster-service: "true"
      spec:
        containers:
        - args:
          - --kvstore=etcd
          - --kvstore-opt=etcd.config=/var/lib/etcd-config/etcd.config
          - --k8s-require-ipv4-pod-cidr
          - --config-dir=/tmp/cilium/config-map
          command:
          - cilium-agent
          env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CILIUM_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CILIUM_FLANNEL_MASTER_DEVICE
            valueFrom:
              configMapKeyRef:
                key: flannel-master-device
                name: cilium-config
                optional: true
          - name: CILIUM_FLANNEL_UNINSTALL_ON_EXIT
            valueFrom:
              configMapKeyRef:
                key: flannel-uninstall-on-exit
                name: cilium-config
                optional: true
          - name: CILIUM_CLUSTERMESH_CONFIG
            value: /var/lib/cilium/clustermesh/
          - name: CILIUM_CNI_CHAINING_MODE
            valueFrom:
              configMapKeyRef:
                key: cni-chaining-mode
                name: cilium-config
                optional: true
          - name: CILIUM_CUSTOM_CNI_CONF
            valueFrom:
              configMapKeyRef:
                key: custom-cni-conf
                name: cilium-config
                optional: true
          image: docker.io/cilium/cilium:v1.8.5
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command:
                - /cni-install.sh
            preStop:
              exec:
                command:
                - /cni-uninstall.sh
          livenessProbe:
            failureThreshold: 10
            httpGet:
              host: 127.0.0.1
              httpHeaders:
              - name: brief
                value: "true"
              path: /healthz
              port: 9876
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: cilium-agent
          ports:
          - containerPort: 9090
            hostPort: 9090
            name: prometheus
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - cilium
              - status
              - --brief
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 300m
              memory: 300Mi
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
              - SYS_MODULE
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /sys/fs/bpf
            name: bpf-maps
          - mountPath: /var/run/cilium
            name: cilium-run
          - mountPath: /host/opt/cni/bin
            name: cni-path
          - mountPath: /host/etc/cni/net.d
            name: etc-cni-netd
          - mountPath: /var/lib/etcd-config
            name: etcd-config-path
            readOnly: true
          - mountPath: /var/lib/etcd-secrets
            name: etcd-secrets
            readOnly: true
          - mountPath: /var/lib/cilium/clustermesh
            name: clustermesh-secrets
            readOnly: true
          - mountPath: /tmp/cilium/config-map
            name: cilium-config-path
            readOnly: true
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /run/xtables.lock
            name: xtables-lock
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - command:
          - /init-container.sh
          env:
          - name: CILIUM_ALL_STATE
            valueFrom:
              configMapKeyRef:
                key: clean-cilium-state
                name: cilium-config
                optional: true
          - name: CILIUM_BPF_STATE
            valueFrom:
              configMapKeyRef:
                key: clean-cilium-bpf-state
                name: cilium-config
                optional: true
          - name: CILIUM_WAIT_BPF_MOUNT
            valueFrom:
              configMapKeyRef:
                key: wait-bpf-mount
                name: cilium-config
                optional: true
          image: docker.io/cilium/cilium-init:2019-04-05
          imagePullPolicy: IfNotPresent
          name: clean-cilium-state
          resources: {}
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /sys/fs/bpf
            mountPropagation: HostToContainer
            name: bpf-maps
          - mountPath: /var/run/cilium
            name: cilium-run
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: cilium
        serviceAccountName: cilium
        terminationGracePeriodSeconds: 1
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /var/run/cilium
            type: DirectoryOrCreate
          name: cilium-run
        - hostPath:
            path: /sys/fs/bpf
            type: DirectoryOrCreate
          name: bpf-maps
        - hostPath:
            path: /opt/cni/bin
            type: DirectoryOrCreate
          name: cni-path
        - hostPath:
            path: /etc/cni/net.d
            type: DirectoryOrCreate
          name: etc-cni-netd
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - configMap:
            defaultMode: 420
            items:
            - key: etcd-config
              path: etcd.config
            name: cilium-config
          name: etcd-config-path
        - name: etcd-secrets
          secret:
            defaultMode: 420
            items:
            - key: etcd-ca
              path: etcd-client-ca.crt
            - key: etcd-key
              path: etcd-client.key
            - key: etcd-cert
              path: etcd-client.crt
            secretName: etcd-secrets
        - name: clustermesh-secrets
          secret:
            defaultMode: 420
            optional: true
            secretName: cilium-clustermesh
        - configMap:
            defaultMode: 420
            name: cilium-config
          name: cilium-config-path
    updateStrategy:
      type: OnDelete
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"name":"csi-do-node","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"app":"csi-do-node"}},"template":{"metadata":{"annotations":{"clusterlint.digitalocean.com/disabled-checks":"privileged-containers,non-root-user,resource-requirements,hostpath-volume"},"labels":{"app":"csi-do-node","role":"csi-do"}},"spec":{"containers":[{"args":["--v=5","--csi-address=$(ADDRESS)","--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"],"env":[{"name":"ADDRESS","value":"/csi/csi.sock"},{"name":"DRIVER_REG_SOCK_PATH","value":"/var/lib/kubelet/plugins/dobs.csi.digitalocean.com/csi.sock"},{"name":"KUBE_NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}}],"image":"quay.io/k8scsi/csi-node-driver-registrar:v2.0.1","lifecycle":{"preStop":{"exec":{"command":["/bin/sh","-c","rm -rf /registration/dobs.csi.digitalocean.com /registration/dobs.csi.digitalocean.com-reg.sock"]}}},"name":"csi-node-driver-registrar","resources":{"requests":{"memory":"20Mi"}},"volumeMounts":[{"mountPath":"/csi/","name":"plugin-dir"},{"mountPath":"/registration/","name":"registration-dir"}]},{"args":["--endpoint=$(CSI_ENDPOINT)","--url=$(DIGITALOCEAN_API_URL)","--driver-name=dobs.csi.digitalocean.com"],"env":[{"name":"CSI_ENDPOINT","value":"unix:///csi/csi.sock"},{"name":"DIGITALOCEAN_API_URL","value":"https://api.digitalocean.com"}],"image":"docker.io/digitalocean/do-csi-plugin:v2.1.1","name":"csi-do-plugin","resources":{"requests":{"memory":"50Mi"}},"securityContext":{"allowPrivilegeEscalation":true,"capabilities":{"add":["SYS_ADMIN"]},"privileged":true},"volumeMounts":[{"mountPath":"/csi","name":"plugin-dir"},{"mountPath":"/var/lib/kubelet","mountPropagation":"Bidirectional","name":"pods-mount-dir"},{"mountPath":"/dev","name":"device-dir"}]}],"hostNetwork":true,"priorityClassName":"system-node-critical","serviceAccount":"csi-do-node-sa","tolerations":[{"effect":"NoExecute","operator":"Exists"},{"effect":"NoSchedule","operator":"Exists"},{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/var/lib/kubelet/plugins_registry/","type":"DirectoryOrCreate"},"name":"registration-dir"},{"hostPath":{"path":"/var/lib/kubelet/plugins/dobs.csi.digitalocean.com","type":"DirectoryOrCreate"},"name":"plugin-dir"},{"hostPath":{"path":"/var/lib/kubelet","type":"Directory"},"name":"pods-mount-dir"},{"hostPath":{"path":"/dev"},"name":"device-dir"}]}},"updateStrategy":{"type":"OnDelete"}}}
    creationTimestamp: "2021-01-21T12:23:32Z"
    generation: 1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deprecated.daemonset.template.generation: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
        f:spec:
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:clusterlint.digitalocean.com/disabled-checks: {}
              f:labels:
                .: {}
                f:app: {}
                f:role: {}
            f:spec:
              f:containers:
                k:{"name":"csi-do-plugin"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"CSI_ENDPOINT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DIGITALOCEAN_API_URL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/csi"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/dev"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/kubelet"}:
                      .: {}
                      f:mountPath: {}
                      f:mountPropagation: {}
                      f:name: {}
                k:{"name":"csi-node-driver-registrar"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"ADDRESS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DRIVER_REG_SOCK_PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBE_NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/csi/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/registration/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"device-dir"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"plugin-dir"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"pods-mount-dir"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"registration-dir"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-21T12:23:32Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberAvailable: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:47:40Z"
    name: csi-do-node
    namespace: kube-system
    resourceVersion: "180498"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/csi-do-node
    uid: a48f08df-d2e6-471e-93e6-c4db4e7059ac
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: csi-do-node
    template:
      metadata:
        annotations:
          clusterlint.digitalocean.com/disabled-checks: privileged-containers,non-root-user,resource-requirements,hostpath-volume
        creationTimestamp: null
        labels:
          app: csi-do-node
          role: csi-do
      spec:
        containers:
        - args:
          - --v=5
          - --csi-address=$(ADDRESS)
          - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          - name: DRIVER_REG_SOCK_PATH
            value: /var/lib/kubelet/plugins/dobs.csi.digitalocean.com/csi.sock
          - name: KUBE_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: quay.io/k8scsi/csi-node-driver-registrar:v2.0.1
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - rm -rf /registration/dobs.csi.digitalocean.com /registration/dobs.csi.digitalocean.com-reg.sock
          name: csi-node-driver-registrar
          resources:
            requests:
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi/
            name: plugin-dir
          - mountPath: /registration/
            name: registration-dir
        - args:
          - --endpoint=$(CSI_ENDPOINT)
          - --url=$(DIGITALOCEAN_API_URL)
          - --driver-name=dobs.csi.digitalocean.com
          env:
          - name: CSI_ENDPOINT
            value: unix:///csi/csi.sock
          - name: DIGITALOCEAN_API_URL
            value: https://api.digitalocean.com
          image: docker.io/digitalocean/do-csi-plugin:v2.1.1
          imagePullPolicy: IfNotPresent
          name: csi-do-plugin
          resources:
            requests:
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - SYS_ADMIN
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: plugin-dir
          - mountPath: /var/lib/kubelet
            mountPropagation: Bidirectional
            name: pods-mount-dir
          - mountPath: /dev
            name: device-dir
        dnsPolicy: ClusterFirst
        hostNetwork: true
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: csi-do-node-sa
        serviceAccountName: csi-do-node-sa
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
          name: registration-dir
        - hostPath:
            path: /var/lib/kubelet/plugins/dobs.csi.digitalocean.com
            type: DirectoryOrCreate
          name: plugin-dir
        - hostPath:
            path: /var/lib/kubelet
            type: Directory
          name: pods-mount-dir
        - hostPath:
            path: /dev
            type: ""
          name: device-dir
    updateStrategy:
      type: OnDelete
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"app":"do-node-agent"},"name":"do-node-agent","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"app":"do-node-agent"}},"template":{"metadata":{"annotations":{"clusterlint.digitalocean.com/disabled-checks":"hostpath-volume"},"labels":{"app":"do-node-agent"}},"spec":{"containers":[{"args":["--path.procfs=/host/proc","--path.sysfs=/host/sys","--k8s-metrics-path=http://kube-state-metrics.kube-system.svc.cluster.local:8080/metrics","--additional-label=kubernetes_cluster_uuid:70a0b49f-9cf4-42d3-8ad1-714846f3cdc7"],"command":["/bin/do-agent"],"image":"docker.io/digitalocean/do-agent:3","name":"do-node-agent","resources":{"limits":{"cpu":"102m","memory":"100Mi"},"requests":{"cpu":"102m","memory":"80Mi"}},"volumeMounts":[{"mountPath":"/host/proc","name":"proc","readOnly":true},{"mountPath":"/host/sys","name":"sys","readOnly":true},{"mountPath":"/host/root","mountPropagation":"HostToContainer","name":"root","readOnly":true}]}],"dnsPolicy":"ClusterFirstWithHostNet","hostNetwork":true,"nodeSelector":{"beta.kubernetes.io/os":"linux"},"priorityClassName":"system-node-critical","securityContext":{"runAsNonRoot":true,"runAsUser":65534},"serviceAccountName":"do-agent","tolerations":[{"operator":"Exists"}],"volumes":[{"hostPath":{"path":"/proc"},"name":"proc"},{"hostPath":{"path":"/sys"},"name":"sys"},{"hostPath":{"path":"/"},"name":"root"}]}}}}
    creationTimestamp: "2021-01-21T12:23:32Z"
    generation: 1
    labels:
      app: do-node-agent
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deprecated.daemonset.template.generation: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:clusterlint.digitalocean.com/disabled-checks: {}
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"do-node-agent"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/host/proc"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/host/root"}:
                      .: {}
                      f:mountPath: {}
                      f:mountPropagation: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/host/sys"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:nodeSelector:
                .: {}
                f:beta.kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"proc"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"root"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"sys"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:rollingUpdate:
              .: {}
              f:maxUnavailable: {}
            f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-21T12:23:32Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberAvailable: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:47:38Z"
    name: do-node-agent
    namespace: kube-system
    resourceVersion: "180479"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/do-node-agent
    uid: a48f4a5f-7740-44c8-82d8-ec8fef305e7f
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: do-node-agent
    template:
      metadata:
        annotations:
          clusterlint.digitalocean.com/disabled-checks: hostpath-volume
        creationTimestamp: null
        labels:
          app: do-node-agent
      spec:
        containers:
        - args:
          - --path.procfs=/host/proc
          - --path.sysfs=/host/sys
          - --k8s-metrics-path=http://kube-state-metrics.kube-system.svc.cluster.local:8080/metrics
          - --additional-label=kubernetes_cluster_uuid:70a0b49f-9cf4-42d3-8ad1-714846f3cdc7
          command:
          - /bin/do-agent
          image: docker.io/digitalocean/do-agent:3
          imagePullPolicy: IfNotPresent
          name: do-node-agent
          resources:
            limits:
              cpu: 102m
              memory: 100Mi
            requests:
              cpu: 102m
              memory: 80Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/proc
            name: proc
            readOnly: true
          - mountPath: /host/sys
            name: sys
            readOnly: true
          - mountPath: /host/root
            mountPropagation: HostToContainer
            name: root
            readOnly: true
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: do-agent
        serviceAccountName: do-agent
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /proc
            type: ""
          name: proc
        - hostPath:
            path: /sys
            type: ""
          name: sys
        - hostPath:
            path: /
            type: ""
          name: root
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"k8s-app":"kube-proxy","tier":"node"},"name":"kube-proxy","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"kube-proxy","tier":"node"}},"template":{"metadata":{"annotations":{"clusterlint.digitalocean.com/disabled-checks":"privileged-containers,non-root-user,resource-requirements,hostpath-volume"},"labels":{"k8s-app":"kube-proxy","tier":"node"}},"spec":{"containers":[{"command":["kube-proxy","--config=/etc/kubernetes/config/kube-proxy-config.yaml"],"image":"k8s.gcr.io/kube-proxy:v1.19.3","name":"kube-proxy","resources":{"requests":{"memory":"125Mi"}},"securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/etc/kubernetes/kubeconfig","name":"kube-proxy-kubeconfig","readOnly":true},{"mountPath":"/etc/kubernetes/config","name":"kube-proxy-config","readOnly":true}]}],"hostNetwork":true,"initContainers":[{"command":["sh","-c","rm -f /etc/kubernetes/manifests/kube-proxy.yaml"],"image":"docker.io/library/busybox:1.30","name":"clear-static-kube-proxy","securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/etc/kubernetes/manifests","name":"etc-kube-manifests"}]}],"priorityClassName":"system-node-critical","serviceAccountName":"kube-proxy","tolerations":[{"effect":"NoExecute","operator":"Exists"},{"effect":"NoSchedule","operator":"Exists"},{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"configMap":{"items":[{"key":"kube-proxy-config","path":"kube-proxy-config.yaml"}],"name":"kube-proxy"},"name":"kube-proxy-config"},{"hostPath":{"path":"/etc/kubernetes/manifests"},"name":"etc-kube-manifests"},{"name":"kube-proxy-kubeconfig","secret":{"items":[{"key":"kube-proxy.kubeconfig","path":"kube-proxy.kubeconfig"}],"secretName":"kube-proxy"}}]}},"updateStrategy":{"type":"OnDelete"}}}
    creationTimestamp: "2021-01-21T12:23:29Z"
    generation: 1
    labels:
      k8s-app: kube-proxy
      tier: node
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deprecated.daemonset.template.generation: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:tier: {}
        f:spec:
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:tier: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:clusterlint.digitalocean.com/disabled-checks: {}
              f:labels:
                .: {}
                f:k8s-app: {}
                f:tier: {}
            f:spec:
              f:containers:
                k:{"name":"kube-proxy"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/kubernetes/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/kubernetes/kubeconfig"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:initContainers:
                .: {}
                k:{"name":"clear-static-kube-proxy"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/kubernetes/manifests"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"etc-kube-manifests"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"kube-proxy-config"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"kube-proxy-kubeconfig"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:secretName: {}
          f:updateStrategy:
            f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-21T12:23:29Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberAvailable: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:47:39Z"
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "180491"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/kube-proxy
    uid: b7abc5b2-5d38-4539-9127-c64c85e2c114
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
        tier: node
    template:
      metadata:
        annotations:
          clusterlint.digitalocean.com/disabled-checks: privileged-containers,non-root-user,resource-requirements,hostpath-volume
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
          tier: node
      spec:
        containers:
        - command:
          - kube-proxy
          - --config=/etc/kubernetes/config/kube-proxy-config.yaml
          image: k8s.gcr.io/kube-proxy:v1.19.3
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources:
            requests:
              memory: 125Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/kubernetes/kubeconfig
            name: kube-proxy-kubeconfig
            readOnly: true
          - mountPath: /etc/kubernetes/config
            name: kube-proxy-config
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - command:
          - sh
          - -c
          - rm -f /etc/kubernetes/manifests/kube-proxy.yaml
          image: docker.io/library/busybox:1.30
          imagePullPolicy: IfNotPresent
          name: clear-static-kube-proxy
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/kubernetes/manifests
            name: etc-kube-manifests
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: kube-proxy-config
              path: kube-proxy-config.yaml
            name: kube-proxy
          name: kube-proxy-config
        - hostPath:
            path: /etc/kubernetes/manifests
            type: ""
          name: etc-kube-manifests
        - name: kube-proxy-kubeconfig
          secret:
            defaultMode: 420
            items:
            - key: kube-proxy.kubeconfig
              path: kube-proxy.kubeconfig
            secretName: kube-proxy
    updateStrategy:
      type: OnDelete
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      cloud.weave.works/launcher-info: |-
        {
          "original-request": {
            "url": "/k8s/v1.16/net.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOCIsIEdpdFZlcnNpb246InYxLjE4LjIiLCBHaXRDb21taXQ6IjUyYzU2Y2U3YTgyNzJjNzk4ZGJjMjk4NDYyODhkN2NkOWZiYWUwMzIiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA0LTE2VDExOjU2OjQwWiIsIEdvVmVyc2lvbjoiZ28xLjEzLjkiLCBDb21waWxlcjoiZ2MiLCBQbGF0Zm9ybToibGludXgvYW1kNjQifQpTZXJ2ZXIgVmVyc2lvbjogdmVyc2lvbi5JbmZve01ham9yOiIxIiwgTWlub3I6IjE5IiwgR2l0VmVyc2lvbjoidjEuMTkuMyIsIEdpdENvbW1pdDoiMWUxMWU0YTIxMDgwMjQ5MzVlY2ZjYjI5MTIyMjZjZWRlYWZkOTlkZiIsIEdpdFRyZWVTdGF0ZToiY2xlYW4iLCBCdWlsZERhdGU6IjIwMjAtMTAtMTRUMTI6NDE6NDlaIiwgR29WZXJzaW9uOiJnbzEuMTUuMiIsIENvbXBpbGVyOiJnYyIsIFBsYXRmb3JtOiJsaW51eC9hbWQ2NCJ9Cg==",
            "date": "Thu Jan 21 2021 12:32:52 GMT+0000 (UTC)"
          },
          "email-address": "support@weave.works"
        }
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{"cloud.weave.works/launcher-info":"{\n  \"original-request\": {\n    \"url\": \"/k8s/v1.16/net.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOCIsIEdpdFZlcnNpb246InYxLjE4LjIiLCBHaXRDb21taXQ6IjUyYzU2Y2U3YTgyNzJjNzk4ZGJjMjk4NDYyODhkN2NkOWZiYWUwMzIiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA0LTE2VDExOjU2OjQwWiIsIEdvVmVyc2lvbjoiZ28xLjEzLjkiLCBDb21waWxlcjoiZ2MiLCBQbGF0Zm9ybToibGludXgvYW1kNjQifQpTZXJ2ZXIgVmVyc2lvbjogdmVyc2lvbi5JbmZve01ham9yOiIxIiwgTWlub3I6IjE5IiwgR2l0VmVyc2lvbjoidjEuMTkuMyIsIEdpdENvbW1pdDoiMWUxMWU0YTIxMDgwMjQ5MzVlY2ZjYjI5MTIyMjZjZWRlYWZkOTlkZiIsIEdpdFRyZWVTdGF0ZToiY2xlYW4iLCBCdWlsZERhdGU6IjIwMjAtMTAtMTRUMTI6NDE6NDlaIiwgR29WZXJzaW9uOiJnbzEuMTUuMiIsIENvbXBpbGVyOiJnYyIsIFBsYXRmb3JtOiJsaW51eC9hbWQ2NCJ9Cg==\",\n    \"date\": \"Thu Jan 21 2021 12:32:52 GMT+0000 (UTC)\"\n  },\n  \"email-address\": \"support@weave.works\"\n}"},"labels":{"name":"weave-net"},"name":"weave-net","namespace":"kube-system"},"spec":{"minReadySeconds":5,"selector":{"matchLabels":{"name":"weave-net"}},"template":{"metadata":{"labels":{"name":"weave-net"}},"spec":{"containers":[{"command":["/home/weave/launch.sh"],"env":[{"name":"HOSTNAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}},{"name":"INIT_CONTAINER","value":"true"}],"image":"docker.io/weaveworks/weave-kube:2.8.0","name":"weave","readinessProbe":{"httpGet":{"host":"127.0.0.1","path":"/status","port":6784}},"resources":{"requests":{"cpu":"50m","memory":"100Mi"}},"securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/weavedb","name":"weavedb"},{"mountPath":"/host/var/lib/dbus","name":"dbus"},{"mountPath":"/run/xtables.lock","name":"xtables-lock"}]},{"env":[{"name":"HOSTNAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}}],"image":"docker.io/weaveworks/weave-npc:2.8.0","name":"weave-npc","resources":{"requests":{"cpu":"50m","memory":"100Mi"}},"securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/run/xtables.lock","name":"xtables-lock"}]}],"dnsPolicy":"ClusterFirstWithHostNet","hostNetwork":true,"initContainers":[{"command":["/home/weave/init.sh"],"image":"docker.io/weaveworks/weave-kube:2.8.0","name":"weave-init","securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/host/opt","name":"cni-bin"},{"mountPath":"/host/home","name":"cni-bin2"},{"mountPath":"/host/etc","name":"cni-conf"},{"mountPath":"/lib/modules","name":"lib-modules"},{"mountPath":"/run/xtables.lock","name":"xtables-lock"}]}],"priorityClassName":"system-node-critical","restartPolicy":"Always","securityContext":{"seLinuxOptions":{}},"serviceAccountName":"weave-net","tolerations":[{"effect":"NoSchedule","operator":"Exists"},{"effect":"NoExecute","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/var/lib/weave"},"name":"weavedb"},{"hostPath":{"path":"/opt"},"name":"cni-bin"},{"hostPath":{"path":"/home"},"name":"cni-bin2"},{"hostPath":{"path":"/etc"},"name":"cni-conf"},{"hostPath":{"path":"/var/lib/dbus"},"name":"dbus"},{"hostPath":{"path":"/lib/modules"},"name":"lib-modules"},{"hostPath":{"path":"/run/xtables.lock","type":"FileOrCreate"},"name":"xtables-lock"}]}},"updateStrategy":{"type":"RollingUpdate"}}}
    creationTimestamp: "2021-01-21T12:32:54Z"
    generation: 1
    labels:
      name: weave-net
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cloud.weave.works/launcher-info: {}
            f:deprecated.daemonset.template.generation: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:name: {}
        f:spec:
          f:minReadySeconds: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:name: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:name: {}
            f:spec:
              f:containers:
                k:{"name":"weave"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"HOSTNAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"INIT_CONTAINER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/host/var/lib/dbus"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/run/xtables.lock"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/weavedb"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"weave-npc"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"HOSTNAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/run/xtables.lock"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:initContainers:
                .: {}
                k:{"name":"weave-init"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/host/etc"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/host/home"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/host/opt"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/lib/modules"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/run/xtables.lock"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:seLinuxOptions: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"cni-bin"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"cni-bin2"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"cni-conf"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"dbus"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"lib-modules"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"weavedb"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"xtables-lock"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:rollingUpdate:
              .: {}
              f:maxUnavailable: {}
            f:type: {}
      manager: kubectl
      operation: Update
      time: "2021-01-21T12:32:54Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberAvailable: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:47:51Z"
    name: weave-net
    namespace: kube-system
    resourceVersion: "180575"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/weave-net
    uid: d5d4c2e9-9705-427f-b0a9-7f295701e169
  spec:
    minReadySeconds: 5
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: weave-net
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: weave-net
      spec:
        containers:
        - command:
          - /home/weave/launch.sh
          env:
          - name: HOSTNAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: INIT_CONTAINER
            value: "true"
          image: docker.io/weaveworks/weave-kube:2.8.0
          imagePullPolicy: IfNotPresent
          name: weave
          readinessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              path: /status
              port: 6784
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 50m
              memory: 100Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /weavedb
            name: weavedb
          - mountPath: /host/var/lib/dbus
            name: dbus
          - mountPath: /run/xtables.lock
            name: xtables-lock
        - env:
          - name: HOSTNAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: docker.io/weaveworks/weave-npc:2.8.0
          imagePullPolicy: IfNotPresent
          name: weave-npc
          resources:
            requests:
              cpu: 50m
              memory: 100Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /run/xtables.lock
            name: xtables-lock
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        initContainers:
        - command:
          - /home/weave/init.sh
          image: docker.io/weaveworks/weave-kube:2.8.0
          imagePullPolicy: IfNotPresent
          name: weave-init
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt
            name: cni-bin
          - mountPath: /host/home
            name: cni-bin2
          - mountPath: /host/etc
            name: cni-conf
          - mountPath: /lib/modules
            name: lib-modules
          - mountPath: /run/xtables.lock
            name: xtables-lock
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seLinuxOptions: {}
        serviceAccount: weave-net
        serviceAccountName: weave-net
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
        volumes:
        - hostPath:
            path: /var/lib/weave
            type: ""
          name: weavedb
        - hostPath:
            path: /opt
            type: ""
          name: cni-bin
        - hostPath:
            path: /home
            type: ""
          name: cni-bin2
        - hostPath:
            path: /etc
            type: ""
          name: cni-conf
        - hostPath:
            path: /var/lib/dbus
            type: ""
          name: dbus
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"io.cilium/app":"operator","name":"cilium-operator"},"name":"cilium-operator","namespace":"kube-system"},"spec":{"replicas":2,"selector":{"matchLabels":{"io.cilium/app":"operator","name":"cilium-operator"}},"strategy":{"rollingUpdate":{"maxSurge":1,"maxUnavailable":1},"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"clusterlint.digitalocean.com/disabled-checks":"resource-requirements"},"labels":{"io.cilium/app":"operator","name":"cilium-operator"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"io.cilium/app","operator":"In","values":["operator"]}]},"topologyKey":"kubernetes.io/hostname"},"weight":100}]}},"containers":[{"args":["--debug=$(CILIUM_DEBUG)","--identity-allocation-mode=$(CILIUM_IDENTITY_ALLOCATION_MODE)","--synchronize-k8s-nodes=true"],"command":["cilium-operator"],"env":[{"name":"CILIUM_K8S_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"K8S_NODE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}},{"name":"CILIUM_DEBUG","valueFrom":{"configMapKeyRef":{"key":"debug","name":"cilium-config","optional":true}}},{"name":"CILIUM_CLUSTER_NAME","valueFrom":{"configMapKeyRef":{"key":"cluster-name","name":"cilium-config","optional":true}}},{"name":"CILIUM_CLUSTER_ID","valueFrom":{"configMapKeyRef":{"key":"cluster-id","name":"cilium-config","optional":true}}},{"name":"CILIUM_IPAM","valueFrom":{"configMapKeyRef":{"key":"ipam","name":"cilium-config","optional":true}}},{"name":"CILIUM_DISABLE_ENDPOINT_CRD","valueFrom":{"configMapKeyRef":{"key":"disable-endpoint-crd","name":"cilium-config","optional":true}}},{"name":"CILIUM_KVSTORE","valueFrom":{"configMapKeyRef":{"key":"kvstore","name":"cilium-config","optional":true}}},{"name":"CILIUM_KVSTORE_OPT","valueFrom":{"configMapKeyRef":{"key":"kvstore-opt","name":"cilium-config","optional":true}}},{"name":"AWS_ACCESS_KEY_ID","valueFrom":{"secretKeyRef":{"key":"AWS_ACCESS_KEY_ID","name":"cilium-aws","optional":true}}},{"name":"AWS_SECRET_ACCESS_KEY","valueFrom":{"secretKeyRef":{"key":"AWS_SECRET_ACCESS_KEY","name":"cilium-aws","optional":true}}},{"name":"AWS_DEFAULT_REGION","valueFrom":{"secretKeyRef":{"key":"AWS_DEFAULT_REGION","name":"cilium-aws","optional":true}}},{"name":"CILIUM_IDENTITY_ALLOCATION_MODE","valueFrom":{"configMapKeyRef":{"key":"identity-allocation-mode","name":"cilium-config","optional":true}}}],"image":"docker.io/cilium/operator:v1.8.5","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"host":"127.0.0.1","path":"/healthz","port":9234,"scheme":"HTTP"},"initialDelaySeconds":60,"periodSeconds":10,"timeoutSeconds":3},"name":"cilium-operator","volumeMounts":[{"mountPath":"/var/lib/etcd-config","name":"etcd-config-path","readOnly":true},{"mountPath":"/var/lib/etcd-secrets","name":"etcd-secrets","readOnly":true}]}],"dnsPolicy":"ClusterFirst","hostNetwork":true,"priorityClassName":"system-node-critical","restartPolicy":"Always","serviceAccount":"cilium-operator","serviceAccountName":"cilium-operator","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"configMap":{"defaultMode":420,"items":[{"key":"etcd-config","path":"etcd.config"}],"name":"cilium-config"},"name":"etcd-config-path"},{"name":"etcd-secrets","secret":{"items":[{"key":"etcd-ca","path":"etcd-client-ca.crt"},{"key":"etcd-key","path":"etcd-client.key"},{"key":"etcd-cert","path":"etcd-client.crt"}],"secretName":"etcd-secrets"}}]}}}}
    creationTimestamp: "2021-01-21T12:23:29Z"
    generation: 1
    labels:
      io.cilium/app: operator
      name: cilium-operator
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:io.cilium/app: {}
            f:name: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:io.cilium/app: {}
              f:name: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:clusterlint.digitalocean.com/disabled-checks: {}
              f:labels:
                .: {}
                f:io.cilium/app: {}
                f:name: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"cilium-operator"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"AWS_ACCESS_KEY_ID"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"AWS_DEFAULT_REGION"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"AWS_SECRET_ACCESS_KEY"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_CLUSTER_ID"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_CLUSTER_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_DEBUG"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_DISABLE_ENDPOINT_CRD"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_IDENTITY_ALLOCATION_MODE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_IPAM"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_K8S_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"CILIUM_KVSTORE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_KVSTORE_OPT"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"K8S_NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/var/lib/etcd-config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/var/lib/etcd-secrets"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"etcd-config-path"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"etcd-secrets"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:secretName: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-21T12:23:29Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:43:15Z"
    name: cilium-operator
    namespace: kube-system
    resourceVersion: "179678"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/cilium-operator
    uid: 2b001e76-3ce7-41d2-a2c5-95f332fd6b57
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        io.cilium/app: operator
        name: cilium-operator
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          clusterlint.digitalocean.com/disabled-checks: resource-requirements
        creationTimestamp: null
        labels:
          io.cilium/app: operator
          name: cilium-operator
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: io.cilium/app
                    operator: In
                    values:
                    - operator
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - --debug=$(CILIUM_DEBUG)
          - --identity-allocation-mode=$(CILIUM_IDENTITY_ALLOCATION_MODE)
          - --synchronize-k8s-nodes=true
          command:
          - cilium-operator
          env:
          - name: CILIUM_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CILIUM_DEBUG
            valueFrom:
              configMapKeyRef:
                key: debug
                name: cilium-config
                optional: true
          - name: CILIUM_CLUSTER_NAME
            valueFrom:
              configMapKeyRef:
                key: cluster-name
                name: cilium-config
                optional: true
          - name: CILIUM_CLUSTER_ID
            valueFrom:
              configMapKeyRef:
                key: cluster-id
                name: cilium-config
                optional: true
          - name: CILIUM_IPAM
            valueFrom:
              configMapKeyRef:
                key: ipam
                name: cilium-config
                optional: true
          - name: CILIUM_DISABLE_ENDPOINT_CRD
            valueFrom:
              configMapKeyRef:
                key: disable-endpoint-crd
                name: cilium-config
                optional: true
          - name: CILIUM_KVSTORE
            valueFrom:
              configMapKeyRef:
                key: kvstore
                name: cilium-config
                optional: true
          - name: CILIUM_KVSTORE_OPT
            valueFrom:
              configMapKeyRef:
                key: kvstore-opt
                name: cilium-config
                optional: true
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: cilium-aws
                optional: true
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: cilium-aws
                optional: true
          - name: AWS_DEFAULT_REGION
            valueFrom:
              secretKeyRef:
                key: AWS_DEFAULT_REGION
                name: cilium-aws
                optional: true
          - name: CILIUM_IDENTITY_ALLOCATION_MODE
            valueFrom:
              configMapKeyRef:
                key: identity-allocation-mode
                name: cilium-config
                optional: true
          image: docker.io/cilium/operator:v1.8.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: cilium-operator
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/etcd-config
            name: etcd-config-path
            readOnly: true
          - mountPath: /var/lib/etcd-secrets
            name: etcd-secrets
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: cilium-operator
        serviceAccountName: cilium-operator
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: etcd-config
              path: etcd.config
            name: cilium-config
          name: etcd-config-path
        - name: etcd-secrets
          secret:
            defaultMode: 420
            items:
            - key: etcd-ca
              path: etcd-client-ca.crt
            - key: etcd-key
              path: etcd-client.key
            - key: etcd-cert
              path: etcd-client.crt
            secretName: etcd-secrets
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2021-01-21T12:23:39Z"
      lastUpdateTime: "2021-01-21T12:25:45Z"
      message: ReplicaSet "cilium-operator-5f487bb876" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-22T15:43:13Z"
      lastUpdateTime: "2021-01-22T15:43:13Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"k8s-app":"kube-dns","kubernetes.io/name":"CoreDNS"},"name":"coredns","namespace":"kube-system"},"spec":{"replicas":2,"selector":{"matchLabels":{"k8s-app":"kube-dns"}},"strategy":{"rollingUpdate":{"maxSurge":"100%","maxUnavailable":1},"type":"RollingUpdate"},"template":{"metadata":{"labels":{"k8s-app":"kube-dns"}},"spec":{"containers":[{"args":["-conf","/etc/coredns/Corefile"],"image":"docker.io/coredns/coredns:1.7.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/health","port":8080,"scheme":"HTTP"},"initialDelaySeconds":60,"successThreshold":1,"timeoutSeconds":5},"name":"coredns","ports":[{"containerPort":53,"name":"dns","protocol":"UDP"},{"containerPort":53,"name":"dns-tcp","protocol":"TCP"},{"containerPort":9153,"name":"metrics","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/ready","port":8181,"scheme":"HTTP"}},"resources":{"limits":{"memory":"170Mi"},"requests":{"cpu":"100m","memory":"70Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_BIND_SERVICE"],"drop":["all"]},"readOnlyRootFilesystem":true},"volumeMounts":[{"mountPath":"/etc/coredns","name":"config-volume","readOnly":true},{"mountPath":"/etc/coredns/custom","name":"custom-config-volume","readOnly":true}]}],"dnsPolicy":"Default","nodeSelector":{"beta.kubernetes.io/os":"linux"},"priorityClassName":"system-cluster-critical","serviceAccountName":"coredns","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"configMap":{"items":[{"key":"Corefile","path":"Corefile"}],"name":"coredns"},"name":"config-volume"},{"configMap":{"defaultMode":420,"name":"coredns-custom","optional":true},"name":"custom-config-volume"}]}}}}
    creationTimestamp: "2021-01-21T12:23:31Z"
    generation: 1
    labels:
      k8s-app: kube-dns
      kubernetes.io/name: CoreDNS
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:kubernetes.io/name: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"coredns"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":53,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":53,"protocol":"UDP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9153,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/coredns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/coredns/custom"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:beta.kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"custom-config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                    f:optional: {}
                  f:name: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-21T12:23:31Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:47:53Z"
    name: coredns
    namespace: kube-system
    resourceVersion: "180585"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/coredns
    uid: a375241a-c625-4e6e-9138-a9f2fb8c9c99
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 100%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: docker.io/coredns/coredns:1.7.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
          - mountPath: /etc/coredns/custom
            name: custom-config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
        - configMap:
            defaultMode: 420
            name: coredns-custom
            optional: true
          name: custom-config-volume
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2021-01-21T12:26:37Z"
      lastUpdateTime: "2021-01-21T12:26:37Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-21T12:23:39Z"
      lastUpdateTime: "2021-01-21T12:26:52Z"
      message: ReplicaSet "coredns-76bcfddf46" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T12:23:39Z"
    generation: 1
    labels:
      io.cilium/app: operator
      name: cilium-operator
      pod-template-hash: 5f487bb876
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:io.cilium/app: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"2b001e76-3ce7-41d2-a2c5-95f332fd6b57"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:io.cilium/app: {}
              f:name: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:clusterlint.digitalocean.com/disabled-checks: {}
              f:labels:
                .: {}
                f:io.cilium/app: {}
                f:name: {}
                f:pod-template-hash: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"cilium-operator"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"AWS_ACCESS_KEY_ID"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"AWS_DEFAULT_REGION"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"AWS_SECRET_ACCESS_KEY"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_CLUSTER_ID"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_CLUSTER_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_DEBUG"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_DISABLE_ENDPOINT_CRD"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_IDENTITY_ALLOCATION_MODE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_IPAM"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_K8S_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"CILIUM_KVSTORE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"CILIUM_KVSTORE_OPT"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"K8S_NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/var/lib/etcd-config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/var/lib/etcd-secrets"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"etcd-config-path"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"etcd-secrets"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:secretName: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:43:15Z"
    name: cilium-operator-5f487bb876
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cilium-operator
      uid: 2b001e76-3ce7-41d2-a2c5-95f332fd6b57
    resourceVersion: "179676"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/cilium-operator-5f487bb876
    uid: d252f06a-98dd-4872-997b-3b6bfa792a6f
  spec:
    replicas: 2
    selector:
      matchLabels:
        io.cilium/app: operator
        name: cilium-operator
        pod-template-hash: 5f487bb876
    template:
      metadata:
        annotations:
          clusterlint.digitalocean.com/disabled-checks: resource-requirements
        creationTimestamp: null
        labels:
          io.cilium/app: operator
          name: cilium-operator
          pod-template-hash: 5f487bb876
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: io.cilium/app
                    operator: In
                    values:
                    - operator
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - --debug=$(CILIUM_DEBUG)
          - --identity-allocation-mode=$(CILIUM_IDENTITY_ALLOCATION_MODE)
          - --synchronize-k8s-nodes=true
          command:
          - cilium-operator
          env:
          - name: CILIUM_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CILIUM_DEBUG
            valueFrom:
              configMapKeyRef:
                key: debug
                name: cilium-config
                optional: true
          - name: CILIUM_CLUSTER_NAME
            valueFrom:
              configMapKeyRef:
                key: cluster-name
                name: cilium-config
                optional: true
          - name: CILIUM_CLUSTER_ID
            valueFrom:
              configMapKeyRef:
                key: cluster-id
                name: cilium-config
                optional: true
          - name: CILIUM_IPAM
            valueFrom:
              configMapKeyRef:
                key: ipam
                name: cilium-config
                optional: true
          - name: CILIUM_DISABLE_ENDPOINT_CRD
            valueFrom:
              configMapKeyRef:
                key: disable-endpoint-crd
                name: cilium-config
                optional: true
          - name: CILIUM_KVSTORE
            valueFrom:
              configMapKeyRef:
                key: kvstore
                name: cilium-config
                optional: true
          - name: CILIUM_KVSTORE_OPT
            valueFrom:
              configMapKeyRef:
                key: kvstore-opt
                name: cilium-config
                optional: true
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: cilium-aws
                optional: true
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: cilium-aws
                optional: true
          - name: AWS_DEFAULT_REGION
            valueFrom:
              secretKeyRef:
                key: AWS_DEFAULT_REGION
                name: cilium-aws
                optional: true
          - name: CILIUM_IDENTITY_ALLOCATION_MODE
            valueFrom:
              configMapKeyRef:
                key: identity-allocation-mode
                name: cilium-config
                optional: true
          image: docker.io/cilium/operator:v1.8.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: cilium-operator
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/etcd-config
            name: etcd-config-path
            readOnly: true
          - mountPath: /var/lib/etcd-secrets
            name: etcd-secrets
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: cilium-operator
        serviceAccountName: cilium-operator
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: etcd-config
              path: etcd.config
            name: cilium-config
          name: etcd-config-path
        - name: etcd-secrets
          secret:
            defaultMode: 420
            items:
            - key: etcd-ca
              path: etcd-client-ca.crt
            - key: etcd-key
              path: etcd-client.key
            - key: etcd-cert
              path: etcd-client.crt
            secretName: etcd-secrets
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-21T12:23:39Z"
    generation: 1
    labels:
      k8s-app: kube-dns
      pod-template-hash: 76bcfddf46
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a375241a-c625-4e6e-9138-a9f2fb8c9c99"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"coredns"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":53,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":53,"protocol":"UDP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9153,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/coredns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/coredns/custom"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:beta.kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"custom-config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                    f:optional: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-22T15:47:53Z"
    name: coredns-76bcfddf46
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: a375241a-c625-4e6e-9138-a9f2fb8c9c99
    resourceVersion: "180584"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/coredns-76bcfddf46
    uid: 7cbc5720-4e9e-4c24-b023-3a1da4b81cef
  spec:
    replicas: 2
    selector:
      matchLabels:
        k8s-app: kube-dns
        pod-template-hash: 76bcfddf46
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
          pod-template-hash: 76bcfddf46
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: docker.io/coredns/coredns:1.7.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
          - mountPath: /etc/coredns/custom
            name: custom-config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
        - configMap:
            defaultMode: 420
            name: coredns-custom
            optional: true
          name: custom-config-volume
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
